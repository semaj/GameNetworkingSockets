// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamnetworkingsockets_messages_udp.proto

#ifndef PROTOBUF_INCLUDED_steamnetworkingsockets_5fmessages_5fudp_2eproto
#define PROTOBUF_INCLUDED_steamnetworkingsockets_5fmessages_5fudp_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "steamnetworkingsockets_messages_certs.pb.h"
#include "steamnetworkingsockets_messages.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto 

namespace protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto
class CMsgSteamSockets_UDP_ChallengeReply;
class CMsgSteamSockets_UDP_ChallengeReplyDefaultTypeInternal;
extern CMsgSteamSockets_UDP_ChallengeReplyDefaultTypeInternal _CMsgSteamSockets_UDP_ChallengeReply_default_instance_;
class CMsgSteamSockets_UDP_ChallengeRequest;
class CMsgSteamSockets_UDP_ChallengeRequestDefaultTypeInternal;
extern CMsgSteamSockets_UDP_ChallengeRequestDefaultTypeInternal _CMsgSteamSockets_UDP_ChallengeRequest_default_instance_;
class CMsgSteamSockets_UDP_ConnectOK;
class CMsgSteamSockets_UDP_ConnectOKDefaultTypeInternal;
extern CMsgSteamSockets_UDP_ConnectOKDefaultTypeInternal _CMsgSteamSockets_UDP_ConnectOK_default_instance_;
class CMsgSteamSockets_UDP_ConnectRequest;
class CMsgSteamSockets_UDP_ConnectRequestDefaultTypeInternal;
extern CMsgSteamSockets_UDP_ConnectRequestDefaultTypeInternal _CMsgSteamSockets_UDP_ConnectRequest_default_instance_;
class CMsgSteamSockets_UDP_ConnectionClosed;
class CMsgSteamSockets_UDP_ConnectionClosedDefaultTypeInternal;
extern CMsgSteamSockets_UDP_ConnectionClosedDefaultTypeInternal _CMsgSteamSockets_UDP_ConnectionClosed_default_instance_;
class CMsgSteamSockets_UDP_NoConnection;
class CMsgSteamSockets_UDP_NoConnectionDefaultTypeInternal;
extern CMsgSteamSockets_UDP_NoConnectionDefaultTypeInternal _CMsgSteamSockets_UDP_NoConnection_default_instance_;
class CMsgSteamSockets_UDP_Stats;
class CMsgSteamSockets_UDP_StatsDefaultTypeInternal;
extern CMsgSteamSockets_UDP_StatsDefaultTypeInternal _CMsgSteamSockets_UDP_Stats_default_instance_;
namespace google {
namespace protobuf {
template<> ::CMsgSteamSockets_UDP_ChallengeReply* Arena::CreateMaybeMessage<::CMsgSteamSockets_UDP_ChallengeReply>(Arena*);
template<> ::CMsgSteamSockets_UDP_ChallengeRequest* Arena::CreateMaybeMessage<::CMsgSteamSockets_UDP_ChallengeRequest>(Arena*);
template<> ::CMsgSteamSockets_UDP_ConnectOK* Arena::CreateMaybeMessage<::CMsgSteamSockets_UDP_ConnectOK>(Arena*);
template<> ::CMsgSteamSockets_UDP_ConnectRequest* Arena::CreateMaybeMessage<::CMsgSteamSockets_UDP_ConnectRequest>(Arena*);
template<> ::CMsgSteamSockets_UDP_ConnectionClosed* Arena::CreateMaybeMessage<::CMsgSteamSockets_UDP_ConnectionClosed>(Arena*);
template<> ::CMsgSteamSockets_UDP_NoConnection* Arena::CreateMaybeMessage<::CMsgSteamSockets_UDP_NoConnection>(Arena*);
template<> ::CMsgSteamSockets_UDP_Stats* Arena::CreateMaybeMessage<::CMsgSteamSockets_UDP_Stats>(Arena*);
}  // namespace protobuf
}  // namespace google

enum CMsgSteamSockets_UDP_Stats_Flags {
  CMsgSteamSockets_UDP_Stats_Flags_ACK_REQUEST_E2E = 2,
  CMsgSteamSockets_UDP_Stats_Flags_ACK_REQUEST_IMMEDIATE = 4
};
bool CMsgSteamSockets_UDP_Stats_Flags_IsValid(int value);
const CMsgSteamSockets_UDP_Stats_Flags CMsgSteamSockets_UDP_Stats_Flags_Flags_MIN = CMsgSteamSockets_UDP_Stats_Flags_ACK_REQUEST_E2E;
const CMsgSteamSockets_UDP_Stats_Flags CMsgSteamSockets_UDP_Stats_Flags_Flags_MAX = CMsgSteamSockets_UDP_Stats_Flags_ACK_REQUEST_IMMEDIATE;
const int CMsgSteamSockets_UDP_Stats_Flags_Flags_ARRAYSIZE = CMsgSteamSockets_UDP_Stats_Flags_Flags_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgSteamSockets_UDP_Stats_Flags_descriptor();
inline const ::std::string& CMsgSteamSockets_UDP_Stats_Flags_Name(CMsgSteamSockets_UDP_Stats_Flags value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgSteamSockets_UDP_Stats_Flags_descriptor(), value);
}
inline bool CMsgSteamSockets_UDP_Stats_Flags_Parse(
    const ::std::string& name, CMsgSteamSockets_UDP_Stats_Flags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgSteamSockets_UDP_Stats_Flags>(
    CMsgSteamSockets_UDP_Stats_Flags_descriptor(), name, value);
}
enum ESteamNetworkingUDPMsgID {
  k_ESteamNetworkingUDPMsg_ChallengeRequest = 32,
  k_ESteamNetworkingUDPMsg_ChallengeReply = 33,
  k_ESteamNetworkingUDPMsg_ConnectRequest = 34,
  k_ESteamNetworkingUDPMsg_ConnectOK = 35,
  k_ESteamNetworkingUDPMsg_ConnectionClosed = 36,
  k_ESteamNetworkingUDPMsg_NoConnection = 37
};
bool ESteamNetworkingUDPMsgID_IsValid(int value);
const ESteamNetworkingUDPMsgID ESteamNetworkingUDPMsgID_MIN = k_ESteamNetworkingUDPMsg_ChallengeRequest;
const ESteamNetworkingUDPMsgID ESteamNetworkingUDPMsgID_MAX = k_ESteamNetworkingUDPMsg_NoConnection;
const int ESteamNetworkingUDPMsgID_ARRAYSIZE = ESteamNetworkingUDPMsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESteamNetworkingUDPMsgID_descriptor();
inline const ::std::string& ESteamNetworkingUDPMsgID_Name(ESteamNetworkingUDPMsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESteamNetworkingUDPMsgID_descriptor(), value);
}
inline bool ESteamNetworkingUDPMsgID_Parse(
    const ::std::string& name, ESteamNetworkingUDPMsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESteamNetworkingUDPMsgID>(
    ESteamNetworkingUDPMsgID_descriptor(), name, value);
}
// ===================================================================

class CMsgSteamSockets_UDP_ChallengeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgSteamSockets_UDP_ChallengeRequest) */ {
 public:
  CMsgSteamSockets_UDP_ChallengeRequest();
  virtual ~CMsgSteamSockets_UDP_ChallengeRequest();

  CMsgSteamSockets_UDP_ChallengeRequest(const CMsgSteamSockets_UDP_ChallengeRequest& from);

  inline CMsgSteamSockets_UDP_ChallengeRequest& operator=(const CMsgSteamSockets_UDP_ChallengeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamSockets_UDP_ChallengeRequest(CMsgSteamSockets_UDP_ChallengeRequest&& from) noexcept
    : CMsgSteamSockets_UDP_ChallengeRequest() {
    *this = ::std::move(from);
  }

  inline CMsgSteamSockets_UDP_ChallengeRequest& operator=(CMsgSteamSockets_UDP_ChallengeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamSockets_UDP_ChallengeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamSockets_UDP_ChallengeRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamSockets_UDP_ChallengeRequest*>(
               &_CMsgSteamSockets_UDP_ChallengeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CMsgSteamSockets_UDP_ChallengeRequest* other);
  friend void swap(CMsgSteamSockets_UDP_ChallengeRequest& a, CMsgSteamSockets_UDP_ChallengeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamSockets_UDP_ChallengeRequest* New() const final {
    return CreateMaybeMessage<CMsgSteamSockets_UDP_ChallengeRequest>(NULL);
  }

  CMsgSteamSockets_UDP_ChallengeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamSockets_UDP_ChallengeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamSockets_UDP_ChallengeRequest& from);
  void MergeFrom(const CMsgSteamSockets_UDP_ChallengeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamSockets_UDP_ChallengeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 connection_id = 1;
  bool has_connection_id() const;
  void clear_connection_id();
  static const int kConnectionIdFieldNumber = 1;
  ::google::protobuf::uint32 connection_id() const;
  void set_connection_id(::google::protobuf::uint32 value);

  // optional uint32 protocol_version = 4;
  bool has_protocol_version() const;
  void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 4;
  ::google::protobuf::uint32 protocol_version() const;
  void set_protocol_version(::google::protobuf::uint32 value);

  // optional fixed64 my_timestamp = 3;
  bool has_my_timestamp() const;
  void clear_my_timestamp();
  static const int kMyTimestampFieldNumber = 3;
  ::google::protobuf::uint64 my_timestamp() const;
  void set_my_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamSockets_UDP_ChallengeRequest)
 private:
  void set_has_connection_id();
  void clear_has_connection_id();
  void set_has_my_timestamp();
  void clear_has_my_timestamp();
  void set_has_protocol_version();
  void clear_has_protocol_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 connection_id_;
  ::google::protobuf::uint32 protocol_version_;
  ::google::protobuf::uint64 my_timestamp_;
  friend struct ::protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgSteamSockets_UDP_ChallengeReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgSteamSockets_UDP_ChallengeReply) */ {
 public:
  CMsgSteamSockets_UDP_ChallengeReply();
  virtual ~CMsgSteamSockets_UDP_ChallengeReply();

  CMsgSteamSockets_UDP_ChallengeReply(const CMsgSteamSockets_UDP_ChallengeReply& from);

  inline CMsgSteamSockets_UDP_ChallengeReply& operator=(const CMsgSteamSockets_UDP_ChallengeReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamSockets_UDP_ChallengeReply(CMsgSteamSockets_UDP_ChallengeReply&& from) noexcept
    : CMsgSteamSockets_UDP_ChallengeReply() {
    *this = ::std::move(from);
  }

  inline CMsgSteamSockets_UDP_ChallengeReply& operator=(CMsgSteamSockets_UDP_ChallengeReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamSockets_UDP_ChallengeReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamSockets_UDP_ChallengeReply* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamSockets_UDP_ChallengeReply*>(
               &_CMsgSteamSockets_UDP_ChallengeReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CMsgSteamSockets_UDP_ChallengeReply* other);
  friend void swap(CMsgSteamSockets_UDP_ChallengeReply& a, CMsgSteamSockets_UDP_ChallengeReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamSockets_UDP_ChallengeReply* New() const final {
    return CreateMaybeMessage<CMsgSteamSockets_UDP_ChallengeReply>(NULL);
  }

  CMsgSteamSockets_UDP_ChallengeReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamSockets_UDP_ChallengeReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamSockets_UDP_ChallengeReply& from);
  void MergeFrom(const CMsgSteamSockets_UDP_ChallengeReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamSockets_UDP_ChallengeReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 challenge = 2;
  bool has_challenge() const;
  void clear_challenge();
  static const int kChallengeFieldNumber = 2;
  ::google::protobuf::uint64 challenge() const;
  void set_challenge(::google::protobuf::uint64 value);

  // optional fixed32 connection_id = 1;
  bool has_connection_id() const;
  void clear_connection_id();
  static const int kConnectionIdFieldNumber = 1;
  ::google::protobuf::uint32 connection_id() const;
  void set_connection_id(::google::protobuf::uint32 value);

  // optional uint32 protocol_version = 4;
  bool has_protocol_version() const;
  void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 4;
  ::google::protobuf::uint32 protocol_version() const;
  void set_protocol_version(::google::protobuf::uint32 value);

  // optional fixed64 your_timestamp = 3;
  bool has_your_timestamp() const;
  void clear_your_timestamp();
  static const int kYourTimestampFieldNumber = 3;
  ::google::protobuf::uint64 your_timestamp() const;
  void set_your_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamSockets_UDP_ChallengeReply)
 private:
  void set_has_connection_id();
  void clear_has_connection_id();
  void set_has_challenge();
  void clear_has_challenge();
  void set_has_your_timestamp();
  void clear_has_your_timestamp();
  void set_has_protocol_version();
  void clear_has_protocol_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 challenge_;
  ::google::protobuf::uint32 connection_id_;
  ::google::protobuf::uint32 protocol_version_;
  ::google::protobuf::uint64 your_timestamp_;
  friend struct ::protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgSteamSockets_UDP_ConnectRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgSteamSockets_UDP_ConnectRequest) */ {
 public:
  CMsgSteamSockets_UDP_ConnectRequest();
  virtual ~CMsgSteamSockets_UDP_ConnectRequest();

  CMsgSteamSockets_UDP_ConnectRequest(const CMsgSteamSockets_UDP_ConnectRequest& from);

  inline CMsgSteamSockets_UDP_ConnectRequest& operator=(const CMsgSteamSockets_UDP_ConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamSockets_UDP_ConnectRequest(CMsgSteamSockets_UDP_ConnectRequest&& from) noexcept
    : CMsgSteamSockets_UDP_ConnectRequest() {
    *this = ::std::move(from);
  }

  inline CMsgSteamSockets_UDP_ConnectRequest& operator=(CMsgSteamSockets_UDP_ConnectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamSockets_UDP_ConnectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamSockets_UDP_ConnectRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamSockets_UDP_ConnectRequest*>(
               &_CMsgSteamSockets_UDP_ConnectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CMsgSteamSockets_UDP_ConnectRequest* other);
  friend void swap(CMsgSteamSockets_UDP_ConnectRequest& a, CMsgSteamSockets_UDP_ConnectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamSockets_UDP_ConnectRequest* New() const final {
    return CreateMaybeMessage<CMsgSteamSockets_UDP_ConnectRequest>(NULL);
  }

  CMsgSteamSockets_UDP_ConnectRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamSockets_UDP_ConnectRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamSockets_UDP_ConnectRequest& from);
  void MergeFrom(const CMsgSteamSockets_UDP_ConnectRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamSockets_UDP_ConnectRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgSteamDatagramCertificateSigned cert = 4;
  bool has_cert() const;
  void clear_cert();
  static const int kCertFieldNumber = 4;
  private:
  const ::CMsgSteamDatagramCertificateSigned& _internal_cert() const;
  public:
  const ::CMsgSteamDatagramCertificateSigned& cert() const;
  ::CMsgSteamDatagramCertificateSigned* release_cert();
  ::CMsgSteamDatagramCertificateSigned* mutable_cert();
  void set_allocated_cert(::CMsgSteamDatagramCertificateSigned* cert);

  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
  bool has_crypt() const;
  void clear_crypt();
  static const int kCryptFieldNumber = 7;
  private:
  const ::CMsgSteamDatagramSessionCryptInfoSigned& _internal_crypt() const;
  public:
  const ::CMsgSteamDatagramSessionCryptInfoSigned& crypt() const;
  ::CMsgSteamDatagramSessionCryptInfoSigned* release_crypt();
  ::CMsgSteamDatagramSessionCryptInfoSigned* mutable_crypt();
  void set_allocated_crypt(::CMsgSteamDatagramSessionCryptInfoSigned* crypt);

  // optional .CMsgSteamNetworkingIdentity identity = 9;
  bool has_identity() const;
  void clear_identity();
  static const int kIdentityFieldNumber = 9;
  private:
  const ::CMsgSteamNetworkingIdentity& _internal_identity() const;
  public:
  const ::CMsgSteamNetworkingIdentity& identity() const;
  ::CMsgSteamNetworkingIdentity* release_identity();
  ::CMsgSteamNetworkingIdentity* mutable_identity();
  void set_allocated_identity(::CMsgSteamNetworkingIdentity* identity);

  // optional fixed64 challenge = 2;
  bool has_challenge() const;
  void clear_challenge();
  static const int kChallengeFieldNumber = 2;
  ::google::protobuf::uint64 challenge() const;
  void set_challenge(::google::protobuf::uint64 value);

  // optional fixed64 legacy_client_steam_id = 3;
  bool has_legacy_client_steam_id() const;
  void clear_legacy_client_steam_id();
  static const int kLegacyClientSteamIdFieldNumber = 3;
  ::google::protobuf::uint64 legacy_client_steam_id() const;
  void set_legacy_client_steam_id(::google::protobuf::uint64 value);

  // optional fixed32 client_connection_id = 1;
  bool has_client_connection_id() const;
  void clear_client_connection_id();
  static const int kClientConnectionIdFieldNumber = 1;
  ::google::protobuf::uint32 client_connection_id() const;
  void set_client_connection_id(::google::protobuf::uint32 value);

  // optional uint32 ping_est_ms = 6;
  bool has_ping_est_ms() const;
  void clear_ping_est_ms();
  static const int kPingEstMsFieldNumber = 6;
  ::google::protobuf::uint32 ping_est_ms() const;
  void set_ping_est_ms(::google::protobuf::uint32 value);

  // optional fixed64 my_timestamp = 5;
  bool has_my_timestamp() const;
  void clear_my_timestamp();
  static const int kMyTimestampFieldNumber = 5;
  ::google::protobuf::uint64 my_timestamp() const;
  void set_my_timestamp(::google::protobuf::uint64 value);

  // optional uint32 legacy_protocol_version = 8;
  bool has_legacy_protocol_version() const;
  void clear_legacy_protocol_version();
  static const int kLegacyProtocolVersionFieldNumber = 8;
  ::google::protobuf::uint32 legacy_protocol_version() const;
  void set_legacy_protocol_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamSockets_UDP_ConnectRequest)
 private:
  void set_has_client_connection_id();
  void clear_has_client_connection_id();
  void set_has_challenge();
  void clear_has_challenge();
  void set_has_my_timestamp();
  void clear_has_my_timestamp();
  void set_has_ping_est_ms();
  void clear_has_ping_est_ms();
  void set_has_crypt();
  void clear_has_crypt();
  void set_has_cert();
  void clear_has_cert();
  void set_has_legacy_protocol_version();
  void clear_has_legacy_protocol_version();
  void set_has_identity();
  void clear_has_identity();
  void set_has_legacy_client_steam_id();
  void clear_has_legacy_client_steam_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::CMsgSteamDatagramCertificateSigned* cert_;
  ::CMsgSteamDatagramSessionCryptInfoSigned* crypt_;
  ::CMsgSteamNetworkingIdentity* identity_;
  ::google::protobuf::uint64 challenge_;
  ::google::protobuf::uint64 legacy_client_steam_id_;
  ::google::protobuf::uint32 client_connection_id_;
  ::google::protobuf::uint32 ping_est_ms_;
  ::google::protobuf::uint64 my_timestamp_;
  ::google::protobuf::uint32 legacy_protocol_version_;
  friend struct ::protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgSteamSockets_UDP_ConnectOK : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgSteamSockets_UDP_ConnectOK) */ {
 public:
  CMsgSteamSockets_UDP_ConnectOK();
  virtual ~CMsgSteamSockets_UDP_ConnectOK();

  CMsgSteamSockets_UDP_ConnectOK(const CMsgSteamSockets_UDP_ConnectOK& from);

  inline CMsgSteamSockets_UDP_ConnectOK& operator=(const CMsgSteamSockets_UDP_ConnectOK& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamSockets_UDP_ConnectOK(CMsgSteamSockets_UDP_ConnectOK&& from) noexcept
    : CMsgSteamSockets_UDP_ConnectOK() {
    *this = ::std::move(from);
  }

  inline CMsgSteamSockets_UDP_ConnectOK& operator=(CMsgSteamSockets_UDP_ConnectOK&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamSockets_UDP_ConnectOK& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamSockets_UDP_ConnectOK* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamSockets_UDP_ConnectOK*>(
               &_CMsgSteamSockets_UDP_ConnectOK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CMsgSteamSockets_UDP_ConnectOK* other);
  friend void swap(CMsgSteamSockets_UDP_ConnectOK& a, CMsgSteamSockets_UDP_ConnectOK& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamSockets_UDP_ConnectOK* New() const final {
    return CreateMaybeMessage<CMsgSteamSockets_UDP_ConnectOK>(NULL);
  }

  CMsgSteamSockets_UDP_ConnectOK* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamSockets_UDP_ConnectOK>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamSockets_UDP_ConnectOK& from);
  void MergeFrom(const CMsgSteamSockets_UDP_ConnectOK& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamSockets_UDP_ConnectOK* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
  bool has_crypt() const;
  void clear_crypt();
  static const int kCryptFieldNumber = 7;
  private:
  const ::CMsgSteamDatagramSessionCryptInfoSigned& _internal_crypt() const;
  public:
  const ::CMsgSteamDatagramSessionCryptInfoSigned& crypt() const;
  ::CMsgSteamDatagramSessionCryptInfoSigned* release_crypt();
  ::CMsgSteamDatagramSessionCryptInfoSigned* mutable_crypt();
  void set_allocated_crypt(::CMsgSteamDatagramSessionCryptInfoSigned* crypt);

  // optional .CMsgSteamDatagramCertificateSigned cert = 8;
  bool has_cert() const;
  void clear_cert();
  static const int kCertFieldNumber = 8;
  private:
  const ::CMsgSteamDatagramCertificateSigned& _internal_cert() const;
  public:
  const ::CMsgSteamDatagramCertificateSigned& cert() const;
  ::CMsgSteamDatagramCertificateSigned* release_cert();
  ::CMsgSteamDatagramCertificateSigned* mutable_cert();
  void set_allocated_cert(::CMsgSteamDatagramCertificateSigned* cert);

  // optional .CMsgSteamNetworkingIdentity identity = 10;
  bool has_identity() const;
  void clear_identity();
  static const int kIdentityFieldNumber = 10;
  private:
  const ::CMsgSteamNetworkingIdentity& _internal_identity() const;
  public:
  const ::CMsgSteamNetworkingIdentity& identity() const;
  ::CMsgSteamNetworkingIdentity* release_identity();
  ::CMsgSteamNetworkingIdentity* mutable_identity();
  void set_allocated_identity(::CMsgSteamNetworkingIdentity* identity);

  // optional fixed64 legacy_server_steam_id = 2;
  bool has_legacy_server_steam_id() const;
  void clear_legacy_server_steam_id();
  static const int kLegacyServerSteamIdFieldNumber = 2;
  ::google::protobuf::uint64 legacy_server_steam_id() const;
  void set_legacy_server_steam_id(::google::protobuf::uint64 value);

  // optional fixed32 client_connection_id = 1;
  bool has_client_connection_id() const;
  void clear_client_connection_id();
  static const int kClientConnectionIdFieldNumber = 1;
  ::google::protobuf::uint32 client_connection_id() const;
  void set_client_connection_id(::google::protobuf::uint32 value);

  // optional uint32 delay_time_usec = 4;
  bool has_delay_time_usec() const;
  void clear_delay_time_usec();
  static const int kDelayTimeUsecFieldNumber = 4;
  ::google::protobuf::uint32 delay_time_usec() const;
  void set_delay_time_usec(::google::protobuf::uint32 value);

  // optional fixed64 your_timestamp = 3;
  bool has_your_timestamp() const;
  void clear_your_timestamp();
  static const int kYourTimestampFieldNumber = 3;
  ::google::protobuf::uint64 your_timestamp() const;
  void set_your_timestamp(::google::protobuf::uint64 value);

  // optional fixed32 server_connection_id = 5;
  bool has_server_connection_id() const;
  void clear_server_connection_id();
  static const int kServerConnectionIdFieldNumber = 5;
  ::google::protobuf::uint32 server_connection_id() const;
  void set_server_connection_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamSockets_UDP_ConnectOK)
 private:
  void set_has_client_connection_id();
  void clear_has_client_connection_id();
  void set_has_server_connection_id();
  void clear_has_server_connection_id();
  void set_has_your_timestamp();
  void clear_has_your_timestamp();
  void set_has_delay_time_usec();
  void clear_has_delay_time_usec();
  void set_has_crypt();
  void clear_has_crypt();
  void set_has_cert();
  void clear_has_cert();
  void set_has_identity();
  void clear_has_identity();
  void set_has_legacy_server_steam_id();
  void clear_has_legacy_server_steam_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::CMsgSteamDatagramSessionCryptInfoSigned* crypt_;
  ::CMsgSteamDatagramCertificateSigned* cert_;
  ::CMsgSteamNetworkingIdentity* identity_;
  ::google::protobuf::uint64 legacy_server_steam_id_;
  ::google::protobuf::uint32 client_connection_id_;
  ::google::protobuf::uint32 delay_time_usec_;
  ::google::protobuf::uint64 your_timestamp_;
  ::google::protobuf::uint32 server_connection_id_;
  friend struct ::protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgSteamSockets_UDP_ConnectionClosed : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgSteamSockets_UDP_ConnectionClosed) */ {
 public:
  CMsgSteamSockets_UDP_ConnectionClosed();
  virtual ~CMsgSteamSockets_UDP_ConnectionClosed();

  CMsgSteamSockets_UDP_ConnectionClosed(const CMsgSteamSockets_UDP_ConnectionClosed& from);

  inline CMsgSteamSockets_UDP_ConnectionClosed& operator=(const CMsgSteamSockets_UDP_ConnectionClosed& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamSockets_UDP_ConnectionClosed(CMsgSteamSockets_UDP_ConnectionClosed&& from) noexcept
    : CMsgSteamSockets_UDP_ConnectionClosed() {
    *this = ::std::move(from);
  }

  inline CMsgSteamSockets_UDP_ConnectionClosed& operator=(CMsgSteamSockets_UDP_ConnectionClosed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamSockets_UDP_ConnectionClosed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamSockets_UDP_ConnectionClosed* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamSockets_UDP_ConnectionClosed*>(
               &_CMsgSteamSockets_UDP_ConnectionClosed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CMsgSteamSockets_UDP_ConnectionClosed* other);
  friend void swap(CMsgSteamSockets_UDP_ConnectionClosed& a, CMsgSteamSockets_UDP_ConnectionClosed& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamSockets_UDP_ConnectionClosed* New() const final {
    return CreateMaybeMessage<CMsgSteamSockets_UDP_ConnectionClosed>(NULL);
  }

  CMsgSteamSockets_UDP_ConnectionClosed* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamSockets_UDP_ConnectionClosed>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamSockets_UDP_ConnectionClosed& from);
  void MergeFrom(const CMsgSteamSockets_UDP_ConnectionClosed& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamSockets_UDP_ConnectionClosed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string debug = 2;
  bool has_debug() const;
  void clear_debug();
  static const int kDebugFieldNumber = 2;
  const ::std::string& debug() const;
  void set_debug(const ::std::string& value);
  #if LANG_CXX11
  void set_debug(::std::string&& value);
  #endif
  void set_debug(const char* value);
  void set_debug(const char* value, size_t size);
  ::std::string* mutable_debug();
  ::std::string* release_debug();
  void set_allocated_debug(::std::string* debug);

  // optional uint32 reason_code = 3;
  bool has_reason_code() const;
  void clear_reason_code();
  static const int kReasonCodeFieldNumber = 3;
  ::google::protobuf::uint32 reason_code() const;
  void set_reason_code(::google::protobuf::uint32 value);

  // optional fixed32 to_connection_id = 4;
  bool has_to_connection_id() const;
  void clear_to_connection_id();
  static const int kToConnectionIdFieldNumber = 4;
  ::google::protobuf::uint32 to_connection_id() const;
  void set_to_connection_id(::google::protobuf::uint32 value);

  // optional fixed32 from_connection_id = 5;
  bool has_from_connection_id() const;
  void clear_from_connection_id();
  static const int kFromConnectionIdFieldNumber = 5;
  ::google::protobuf::uint32 from_connection_id() const;
  void set_from_connection_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamSockets_UDP_ConnectionClosed)
 private:
  void set_has_to_connection_id();
  void clear_has_to_connection_id();
  void set_has_from_connection_id();
  void clear_has_from_connection_id();
  void set_has_debug();
  void clear_has_debug();
  void set_has_reason_code();
  void clear_has_reason_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr debug_;
  ::google::protobuf::uint32 reason_code_;
  ::google::protobuf::uint32 to_connection_id_;
  ::google::protobuf::uint32 from_connection_id_;
  friend struct ::protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgSteamSockets_UDP_NoConnection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgSteamSockets_UDP_NoConnection) */ {
 public:
  CMsgSteamSockets_UDP_NoConnection();
  virtual ~CMsgSteamSockets_UDP_NoConnection();

  CMsgSteamSockets_UDP_NoConnection(const CMsgSteamSockets_UDP_NoConnection& from);

  inline CMsgSteamSockets_UDP_NoConnection& operator=(const CMsgSteamSockets_UDP_NoConnection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamSockets_UDP_NoConnection(CMsgSteamSockets_UDP_NoConnection&& from) noexcept
    : CMsgSteamSockets_UDP_NoConnection() {
    *this = ::std::move(from);
  }

  inline CMsgSteamSockets_UDP_NoConnection& operator=(CMsgSteamSockets_UDP_NoConnection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamSockets_UDP_NoConnection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamSockets_UDP_NoConnection* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamSockets_UDP_NoConnection*>(
               &_CMsgSteamSockets_UDP_NoConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CMsgSteamSockets_UDP_NoConnection* other);
  friend void swap(CMsgSteamSockets_UDP_NoConnection& a, CMsgSteamSockets_UDP_NoConnection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamSockets_UDP_NoConnection* New() const final {
    return CreateMaybeMessage<CMsgSteamSockets_UDP_NoConnection>(NULL);
  }

  CMsgSteamSockets_UDP_NoConnection* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamSockets_UDP_NoConnection>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamSockets_UDP_NoConnection& from);
  void MergeFrom(const CMsgSteamSockets_UDP_NoConnection& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamSockets_UDP_NoConnection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 from_connection_id = 2;
  bool has_from_connection_id() const;
  void clear_from_connection_id();
  static const int kFromConnectionIdFieldNumber = 2;
  ::google::protobuf::uint32 from_connection_id() const;
  void set_from_connection_id(::google::protobuf::uint32 value);

  // optional fixed32 to_connection_id = 3;
  bool has_to_connection_id() const;
  void clear_to_connection_id();
  static const int kToConnectionIdFieldNumber = 3;
  ::google::protobuf::uint32 to_connection_id() const;
  void set_to_connection_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamSockets_UDP_NoConnection)
 private:
  void set_has_from_connection_id();
  void clear_has_from_connection_id();
  void set_has_to_connection_id();
  void clear_has_to_connection_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 from_connection_id_;
  ::google::protobuf::uint32 to_connection_id_;
  friend struct ::protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgSteamSockets_UDP_Stats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CMsgSteamSockets_UDP_Stats) */ {
 public:
  CMsgSteamSockets_UDP_Stats();
  virtual ~CMsgSteamSockets_UDP_Stats();

  CMsgSteamSockets_UDP_Stats(const CMsgSteamSockets_UDP_Stats& from);

  inline CMsgSteamSockets_UDP_Stats& operator=(const CMsgSteamSockets_UDP_Stats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamSockets_UDP_Stats(CMsgSteamSockets_UDP_Stats&& from) noexcept
    : CMsgSteamSockets_UDP_Stats() {
    *this = ::std::move(from);
  }

  inline CMsgSteamSockets_UDP_Stats& operator=(CMsgSteamSockets_UDP_Stats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamSockets_UDP_Stats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamSockets_UDP_Stats* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamSockets_UDP_Stats*>(
               &_CMsgSteamSockets_UDP_Stats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CMsgSteamSockets_UDP_Stats* other);
  friend void swap(CMsgSteamSockets_UDP_Stats& a, CMsgSteamSockets_UDP_Stats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamSockets_UDP_Stats* New() const final {
    return CreateMaybeMessage<CMsgSteamSockets_UDP_Stats>(NULL);
  }

  CMsgSteamSockets_UDP_Stats* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamSockets_UDP_Stats>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamSockets_UDP_Stats& from);
  void MergeFrom(const CMsgSteamSockets_UDP_Stats& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamSockets_UDP_Stats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSteamSockets_UDP_Stats_Flags Flags;
  static const Flags ACK_REQUEST_E2E =
    CMsgSteamSockets_UDP_Stats_Flags_ACK_REQUEST_E2E;
  static const Flags ACK_REQUEST_IMMEDIATE =
    CMsgSteamSockets_UDP_Stats_Flags_ACK_REQUEST_IMMEDIATE;
  static inline bool Flags_IsValid(int value) {
    return CMsgSteamSockets_UDP_Stats_Flags_IsValid(value);
  }
  static const Flags Flags_MIN =
    CMsgSteamSockets_UDP_Stats_Flags_Flags_MIN;
  static const Flags Flags_MAX =
    CMsgSteamSockets_UDP_Stats_Flags_Flags_MAX;
  static const int Flags_ARRAYSIZE =
    CMsgSteamSockets_UDP_Stats_Flags_Flags_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Flags_descriptor() {
    return CMsgSteamSockets_UDP_Stats_Flags_descriptor();
  }
  static inline const ::std::string& Flags_Name(Flags value) {
    return CMsgSteamSockets_UDP_Stats_Flags_Name(value);
  }
  static inline bool Flags_Parse(const ::std::string& name,
      Flags* value) {
    return CMsgSteamSockets_UDP_Stats_Flags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .CMsgSteamDatagramConnectionQuality stats = 1;
  bool has_stats() const;
  void clear_stats();
  static const int kStatsFieldNumber = 1;
  private:
  const ::CMsgSteamDatagramConnectionQuality& _internal_stats() const;
  public:
  const ::CMsgSteamDatagramConnectionQuality& stats() const;
  ::CMsgSteamDatagramConnectionQuality* release_stats();
  ::CMsgSteamDatagramConnectionQuality* mutable_stats();
  void set_allocated_stats(::CMsgSteamDatagramConnectionQuality* stats);

  // optional uint32 flags = 3;
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 3;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // optional uint32 seq_num = 4;
  bool has_seq_num() const;
  void clear_seq_num();
  static const int kSeqNumFieldNumber = 4;
  ::google::protobuf::uint32 seq_num() const;
  void set_seq_num(::google::protobuf::uint32 value);

  // optional fixed32 to_connection_id = 9;
  bool has_to_connection_id() const;
  void clear_to_connection_id();
  static const int kToConnectionIdFieldNumber = 9;
  ::google::protobuf::uint32 to_connection_id() const;
  void set_to_connection_id(::google::protobuf::uint32 value);

  // optional fixed32 from_connection_id = 10;
  bool has_from_connection_id() const;
  void clear_from_connection_id();
  static const int kFromConnectionIdFieldNumber = 10;
  ::google::protobuf::uint32 from_connection_id() const;
  void set_from_connection_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamSockets_UDP_Stats)
 private:
  void set_has_stats();
  void clear_has_stats();
  void set_has_flags();
  void clear_has_flags();
  void set_has_to_connection_id();
  void clear_has_to_connection_id();
  void set_has_from_connection_id();
  void clear_has_from_connection_id();
  void set_has_seq_num();
  void clear_has_seq_num();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::CMsgSteamDatagramConnectionQuality* stats_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint32 seq_num_;
  ::google::protobuf::uint32 to_connection_id_;
  ::google::protobuf::uint32 from_connection_id_;
  friend struct ::protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgSteamSockets_UDP_ChallengeRequest

// optional fixed32 connection_id = 1;
inline bool CMsgSteamSockets_UDP_ChallengeRequest::has_connection_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamSockets_UDP_ChallengeRequest::set_has_connection_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamSockets_UDP_ChallengeRequest::clear_has_connection_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamSockets_UDP_ChallengeRequest::clear_connection_id() {
  connection_id_ = 0u;
  clear_has_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_ChallengeRequest::connection_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_ChallengeRequest.connection_id)
  return connection_id_;
}
inline void CMsgSteamSockets_UDP_ChallengeRequest::set_connection_id(::google::protobuf::uint32 value) {
  set_has_connection_id();
  connection_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamSockets_UDP_ChallengeRequest.connection_id)
}

// optional fixed64 my_timestamp = 3;
inline bool CMsgSteamSockets_UDP_ChallengeRequest::has_my_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamSockets_UDP_ChallengeRequest::set_has_my_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamSockets_UDP_ChallengeRequest::clear_has_my_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamSockets_UDP_ChallengeRequest::clear_my_timestamp() {
  my_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_my_timestamp();
}
inline ::google::protobuf::uint64 CMsgSteamSockets_UDP_ChallengeRequest::my_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_ChallengeRequest.my_timestamp)
  return my_timestamp_;
}
inline void CMsgSteamSockets_UDP_ChallengeRequest::set_my_timestamp(::google::protobuf::uint64 value) {
  set_has_my_timestamp();
  my_timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamSockets_UDP_ChallengeRequest.my_timestamp)
}

// optional uint32 protocol_version = 4;
inline bool CMsgSteamSockets_UDP_ChallengeRequest::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamSockets_UDP_ChallengeRequest::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamSockets_UDP_ChallengeRequest::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamSockets_UDP_ChallengeRequest::clear_protocol_version() {
  protocol_version_ = 0u;
  clear_has_protocol_version();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_ChallengeRequest::protocol_version() const {
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_ChallengeRequest.protocol_version)
  return protocol_version_;
}
inline void CMsgSteamSockets_UDP_ChallengeRequest::set_protocol_version(::google::protobuf::uint32 value) {
  set_has_protocol_version();
  protocol_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamSockets_UDP_ChallengeRequest.protocol_version)
}

// -------------------------------------------------------------------

// CMsgSteamSockets_UDP_ChallengeReply

// optional fixed32 connection_id = 1;
inline bool CMsgSteamSockets_UDP_ChallengeReply::has_connection_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::set_has_connection_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::clear_has_connection_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::clear_connection_id() {
  connection_id_ = 0u;
  clear_has_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_ChallengeReply::connection_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_ChallengeReply.connection_id)
  return connection_id_;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::set_connection_id(::google::protobuf::uint32 value) {
  set_has_connection_id();
  connection_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamSockets_UDP_ChallengeReply.connection_id)
}

// optional fixed64 challenge = 2;
inline bool CMsgSteamSockets_UDP_ChallengeReply::has_challenge() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::set_has_challenge() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::clear_has_challenge() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::clear_challenge() {
  challenge_ = GOOGLE_ULONGLONG(0);
  clear_has_challenge();
}
inline ::google::protobuf::uint64 CMsgSteamSockets_UDP_ChallengeReply::challenge() const {
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_ChallengeReply.challenge)
  return challenge_;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::set_challenge(::google::protobuf::uint64 value) {
  set_has_challenge();
  challenge_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamSockets_UDP_ChallengeReply.challenge)
}

// optional fixed64 your_timestamp = 3;
inline bool CMsgSteamSockets_UDP_ChallengeReply::has_your_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::set_has_your_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::clear_has_your_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::clear_your_timestamp() {
  your_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_your_timestamp();
}
inline ::google::protobuf::uint64 CMsgSteamSockets_UDP_ChallengeReply::your_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_ChallengeReply.your_timestamp)
  return your_timestamp_;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::set_your_timestamp(::google::protobuf::uint64 value) {
  set_has_your_timestamp();
  your_timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamSockets_UDP_ChallengeReply.your_timestamp)
}

// optional uint32 protocol_version = 4;
inline bool CMsgSteamSockets_UDP_ChallengeReply::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::clear_protocol_version() {
  protocol_version_ = 0u;
  clear_has_protocol_version();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_ChallengeReply::protocol_version() const {
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_ChallengeReply.protocol_version)
  return protocol_version_;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::set_protocol_version(::google::protobuf::uint32 value) {
  set_has_protocol_version();
  protocol_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamSockets_UDP_ChallengeReply.protocol_version)
}

// -------------------------------------------------------------------

// CMsgSteamSockets_UDP_ConnectRequest

// optional fixed32 client_connection_id = 1;
inline bool CMsgSteamSockets_UDP_ConnectRequest::has_client_connection_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_has_client_connection_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_has_client_connection_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_client_connection_id() {
  client_connection_id_ = 0u;
  clear_has_client_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_ConnectRequest::client_connection_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_ConnectRequest.client_connection_id)
  return client_connection_id_;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_client_connection_id(::google::protobuf::uint32 value) {
  set_has_client_connection_id();
  client_connection_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamSockets_UDP_ConnectRequest.client_connection_id)
}

// optional fixed64 challenge = 2;
inline bool CMsgSteamSockets_UDP_ConnectRequest::has_challenge() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_has_challenge() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_has_challenge() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_challenge() {
  challenge_ = GOOGLE_ULONGLONG(0);
  clear_has_challenge();
}
inline ::google::protobuf::uint64 CMsgSteamSockets_UDP_ConnectRequest::challenge() const {
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_ConnectRequest.challenge)
  return challenge_;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_challenge(::google::protobuf::uint64 value) {
  set_has_challenge();
  challenge_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamSockets_UDP_ConnectRequest.challenge)
}

// optional fixed64 my_timestamp = 5;
inline bool CMsgSteamSockets_UDP_ConnectRequest::has_my_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_has_my_timestamp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_has_my_timestamp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_my_timestamp() {
  my_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_my_timestamp();
}
inline ::google::protobuf::uint64 CMsgSteamSockets_UDP_ConnectRequest::my_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_ConnectRequest.my_timestamp)
  return my_timestamp_;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_my_timestamp(::google::protobuf::uint64 value) {
  set_has_my_timestamp();
  my_timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamSockets_UDP_ConnectRequest.my_timestamp)
}

// optional uint32 ping_est_ms = 6;
inline bool CMsgSteamSockets_UDP_ConnectRequest::has_ping_est_ms() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_has_ping_est_ms() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_has_ping_est_ms() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_ping_est_ms() {
  ping_est_ms_ = 0u;
  clear_has_ping_est_ms();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_ConnectRequest::ping_est_ms() const {
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_ConnectRequest.ping_est_ms)
  return ping_est_ms_;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_ping_est_ms(::google::protobuf::uint32 value) {
  set_has_ping_est_ms();
  ping_est_ms_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamSockets_UDP_ConnectRequest.ping_est_ms)
}

// optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
inline bool CMsgSteamSockets_UDP_ConnectRequest::has_crypt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_has_crypt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_has_crypt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgSteamDatagramSessionCryptInfoSigned& CMsgSteamSockets_UDP_ConnectRequest::_internal_crypt() const {
  return *crypt_;
}
inline const ::CMsgSteamDatagramSessionCryptInfoSigned& CMsgSteamSockets_UDP_ConnectRequest::crypt() const {
  const ::CMsgSteamDatagramSessionCryptInfoSigned* p = crypt_;
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_ConnectRequest.crypt)
  return p != NULL ? *p : *reinterpret_cast<const ::CMsgSteamDatagramSessionCryptInfoSigned*>(
      &::_CMsgSteamDatagramSessionCryptInfoSigned_default_instance_);
}
inline ::CMsgSteamDatagramSessionCryptInfoSigned* CMsgSteamSockets_UDP_ConnectRequest::release_crypt() {
  // @@protoc_insertion_point(field_release:CMsgSteamSockets_UDP_ConnectRequest.crypt)
  clear_has_crypt();
  ::CMsgSteamDatagramSessionCryptInfoSigned* temp = crypt_;
  crypt_ = NULL;
  return temp;
}
inline ::CMsgSteamDatagramSessionCryptInfoSigned* CMsgSteamSockets_UDP_ConnectRequest::mutable_crypt() {
  set_has_crypt();
  if (crypt_ == NULL) {
    auto* p = CreateMaybeMessage<::CMsgSteamDatagramSessionCryptInfoSigned>(GetArenaNoVirtual());
    crypt_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CMsgSteamSockets_UDP_ConnectRequest.crypt)
  return crypt_;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_allocated_crypt(::CMsgSteamDatagramSessionCryptInfoSigned* crypt) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(crypt_);
  }
  if (crypt) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      crypt = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, crypt, submessage_arena);
    }
    set_has_crypt();
  } else {
    clear_has_crypt();
  }
  crypt_ = crypt;
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamSockets_UDP_ConnectRequest.crypt)
}

// optional .CMsgSteamDatagramCertificateSigned cert = 4;
inline bool CMsgSteamSockets_UDP_ConnectRequest::has_cert() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_has_cert() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_has_cert() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgSteamDatagramCertificateSigned& CMsgSteamSockets_UDP_ConnectRequest::_internal_cert() const {
  return *cert_;
}
inline const ::CMsgSteamDatagramCertificateSigned& CMsgSteamSockets_UDP_ConnectRequest::cert() const {
  const ::CMsgSteamDatagramCertificateSigned* p = cert_;
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_ConnectRequest.cert)
  return p != NULL ? *p : *reinterpret_cast<const ::CMsgSteamDatagramCertificateSigned*>(
      &::_CMsgSteamDatagramCertificateSigned_default_instance_);
}
inline ::CMsgSteamDatagramCertificateSigned* CMsgSteamSockets_UDP_ConnectRequest::release_cert() {
  // @@protoc_insertion_point(field_release:CMsgSteamSockets_UDP_ConnectRequest.cert)
  clear_has_cert();
  ::CMsgSteamDatagramCertificateSigned* temp = cert_;
  cert_ = NULL;
  return temp;
}
inline ::CMsgSteamDatagramCertificateSigned* CMsgSteamSockets_UDP_ConnectRequest::mutable_cert() {
  set_has_cert();
  if (cert_ == NULL) {
    auto* p = CreateMaybeMessage<::CMsgSteamDatagramCertificateSigned>(GetArenaNoVirtual());
    cert_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CMsgSteamSockets_UDP_ConnectRequest.cert)
  return cert_;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_allocated_cert(::CMsgSteamDatagramCertificateSigned* cert) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cert_);
  }
  if (cert) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cert = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cert, submessage_arena);
    }
    set_has_cert();
  } else {
    clear_has_cert();
  }
  cert_ = cert;
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamSockets_UDP_ConnectRequest.cert)
}

// optional uint32 legacy_protocol_version = 8;
inline bool CMsgSteamSockets_UDP_ConnectRequest::has_legacy_protocol_version() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_has_legacy_protocol_version() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_has_legacy_protocol_version() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_legacy_protocol_version() {
  legacy_protocol_version_ = 0u;
  clear_has_legacy_protocol_version();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_ConnectRequest::legacy_protocol_version() const {
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_ConnectRequest.legacy_protocol_version)
  return legacy_protocol_version_;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_legacy_protocol_version(::google::protobuf::uint32 value) {
  set_has_legacy_protocol_version();
  legacy_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamSockets_UDP_ConnectRequest.legacy_protocol_version)
}

// optional .CMsgSteamNetworkingIdentity identity = 9;
inline bool CMsgSteamSockets_UDP_ConnectRequest::has_identity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_has_identity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_has_identity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgSteamNetworkingIdentity& CMsgSteamSockets_UDP_ConnectRequest::_internal_identity() const {
  return *identity_;
}
inline const ::CMsgSteamNetworkingIdentity& CMsgSteamSockets_UDP_ConnectRequest::identity() const {
  const ::CMsgSteamNetworkingIdentity* p = identity_;
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_ConnectRequest.identity)
  return p != NULL ? *p : *reinterpret_cast<const ::CMsgSteamNetworkingIdentity*>(
      &::_CMsgSteamNetworkingIdentity_default_instance_);
}
inline ::CMsgSteamNetworkingIdentity* CMsgSteamSockets_UDP_ConnectRequest::release_identity() {
  // @@protoc_insertion_point(field_release:CMsgSteamSockets_UDP_ConnectRequest.identity)
  clear_has_identity();
  ::CMsgSteamNetworkingIdentity* temp = identity_;
  identity_ = NULL;
  return temp;
}
inline ::CMsgSteamNetworkingIdentity* CMsgSteamSockets_UDP_ConnectRequest::mutable_identity() {
  set_has_identity();
  if (identity_ == NULL) {
    auto* p = CreateMaybeMessage<::CMsgSteamNetworkingIdentity>(GetArenaNoVirtual());
    identity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CMsgSteamSockets_UDP_ConnectRequest.identity)
  return identity_;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_allocated_identity(::CMsgSteamNetworkingIdentity* identity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(identity_);
  }
  if (identity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      identity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, identity, submessage_arena);
    }
    set_has_identity();
  } else {
    clear_has_identity();
  }
  identity_ = identity;
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamSockets_UDP_ConnectRequest.identity)
}

// optional fixed64 legacy_client_steam_id = 3;
inline bool CMsgSteamSockets_UDP_ConnectRequest::has_legacy_client_steam_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_has_legacy_client_steam_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_has_legacy_client_steam_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_legacy_client_steam_id() {
  legacy_client_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_legacy_client_steam_id();
}
inline ::google::protobuf::uint64 CMsgSteamSockets_UDP_ConnectRequest::legacy_client_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_ConnectRequest.legacy_client_steam_id)
  return legacy_client_steam_id_;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_legacy_client_steam_id(::google::protobuf::uint64 value) {
  set_has_legacy_client_steam_id();
  legacy_client_steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamSockets_UDP_ConnectRequest.legacy_client_steam_id)
}

// -------------------------------------------------------------------

// CMsgSteamSockets_UDP_ConnectOK

// optional fixed32 client_connection_id = 1;
inline bool CMsgSteamSockets_UDP_ConnectOK::has_client_connection_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_has_client_connection_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamSockets_UDP_ConnectOK::clear_has_client_connection_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamSockets_UDP_ConnectOK::clear_client_connection_id() {
  client_connection_id_ = 0u;
  clear_has_client_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_ConnectOK::client_connection_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_ConnectOK.client_connection_id)
  return client_connection_id_;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_client_connection_id(::google::protobuf::uint32 value) {
  set_has_client_connection_id();
  client_connection_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamSockets_UDP_ConnectOK.client_connection_id)
}

// optional fixed32 server_connection_id = 5;
inline bool CMsgSteamSockets_UDP_ConnectOK::has_server_connection_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_has_server_connection_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgSteamSockets_UDP_ConnectOK::clear_has_server_connection_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgSteamSockets_UDP_ConnectOK::clear_server_connection_id() {
  server_connection_id_ = 0u;
  clear_has_server_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_ConnectOK::server_connection_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_ConnectOK.server_connection_id)
  return server_connection_id_;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_server_connection_id(::google::protobuf::uint32 value) {
  set_has_server_connection_id();
  server_connection_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamSockets_UDP_ConnectOK.server_connection_id)
}

// optional fixed64 your_timestamp = 3;
inline bool CMsgSteamSockets_UDP_ConnectOK::has_your_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_has_your_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgSteamSockets_UDP_ConnectOK::clear_has_your_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgSteamSockets_UDP_ConnectOK::clear_your_timestamp() {
  your_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_your_timestamp();
}
inline ::google::protobuf::uint64 CMsgSteamSockets_UDP_ConnectOK::your_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_ConnectOK.your_timestamp)
  return your_timestamp_;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_your_timestamp(::google::protobuf::uint64 value) {
  set_has_your_timestamp();
  your_timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamSockets_UDP_ConnectOK.your_timestamp)
}

// optional uint32 delay_time_usec = 4;
inline bool CMsgSteamSockets_UDP_ConnectOK::has_delay_time_usec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_has_delay_time_usec() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSteamSockets_UDP_ConnectOK::clear_has_delay_time_usec() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSteamSockets_UDP_ConnectOK::clear_delay_time_usec() {
  delay_time_usec_ = 0u;
  clear_has_delay_time_usec();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_ConnectOK::delay_time_usec() const {
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_ConnectOK.delay_time_usec)
  return delay_time_usec_;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_delay_time_usec(::google::protobuf::uint32 value) {
  set_has_delay_time_usec();
  delay_time_usec_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamSockets_UDP_ConnectOK.delay_time_usec)
}

// optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
inline bool CMsgSteamSockets_UDP_ConnectOK::has_crypt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_has_crypt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamSockets_UDP_ConnectOK::clear_has_crypt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgSteamDatagramSessionCryptInfoSigned& CMsgSteamSockets_UDP_ConnectOK::_internal_crypt() const {
  return *crypt_;
}
inline const ::CMsgSteamDatagramSessionCryptInfoSigned& CMsgSteamSockets_UDP_ConnectOK::crypt() const {
  const ::CMsgSteamDatagramSessionCryptInfoSigned* p = crypt_;
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_ConnectOK.crypt)
  return p != NULL ? *p : *reinterpret_cast<const ::CMsgSteamDatagramSessionCryptInfoSigned*>(
      &::_CMsgSteamDatagramSessionCryptInfoSigned_default_instance_);
}
inline ::CMsgSteamDatagramSessionCryptInfoSigned* CMsgSteamSockets_UDP_ConnectOK::release_crypt() {
  // @@protoc_insertion_point(field_release:CMsgSteamSockets_UDP_ConnectOK.crypt)
  clear_has_crypt();
  ::CMsgSteamDatagramSessionCryptInfoSigned* temp = crypt_;
  crypt_ = NULL;
  return temp;
}
inline ::CMsgSteamDatagramSessionCryptInfoSigned* CMsgSteamSockets_UDP_ConnectOK::mutable_crypt() {
  set_has_crypt();
  if (crypt_ == NULL) {
    auto* p = CreateMaybeMessage<::CMsgSteamDatagramSessionCryptInfoSigned>(GetArenaNoVirtual());
    crypt_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CMsgSteamSockets_UDP_ConnectOK.crypt)
  return crypt_;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_allocated_crypt(::CMsgSteamDatagramSessionCryptInfoSigned* crypt) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(crypt_);
  }
  if (crypt) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      crypt = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, crypt, submessage_arena);
    }
    set_has_crypt();
  } else {
    clear_has_crypt();
  }
  crypt_ = crypt;
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamSockets_UDP_ConnectOK.crypt)
}

// optional .CMsgSteamDatagramCertificateSigned cert = 8;
inline bool CMsgSteamSockets_UDP_ConnectOK::has_cert() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_has_cert() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamSockets_UDP_ConnectOK::clear_has_cert() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgSteamDatagramCertificateSigned& CMsgSteamSockets_UDP_ConnectOK::_internal_cert() const {
  return *cert_;
}
inline const ::CMsgSteamDatagramCertificateSigned& CMsgSteamSockets_UDP_ConnectOK::cert() const {
  const ::CMsgSteamDatagramCertificateSigned* p = cert_;
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_ConnectOK.cert)
  return p != NULL ? *p : *reinterpret_cast<const ::CMsgSteamDatagramCertificateSigned*>(
      &::_CMsgSteamDatagramCertificateSigned_default_instance_);
}
inline ::CMsgSteamDatagramCertificateSigned* CMsgSteamSockets_UDP_ConnectOK::release_cert() {
  // @@protoc_insertion_point(field_release:CMsgSteamSockets_UDP_ConnectOK.cert)
  clear_has_cert();
  ::CMsgSteamDatagramCertificateSigned* temp = cert_;
  cert_ = NULL;
  return temp;
}
inline ::CMsgSteamDatagramCertificateSigned* CMsgSteamSockets_UDP_ConnectOK::mutable_cert() {
  set_has_cert();
  if (cert_ == NULL) {
    auto* p = CreateMaybeMessage<::CMsgSteamDatagramCertificateSigned>(GetArenaNoVirtual());
    cert_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CMsgSteamSockets_UDP_ConnectOK.cert)
  return cert_;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_allocated_cert(::CMsgSteamDatagramCertificateSigned* cert) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cert_);
  }
  if (cert) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cert = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cert, submessage_arena);
    }
    set_has_cert();
  } else {
    clear_has_cert();
  }
  cert_ = cert;
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamSockets_UDP_ConnectOK.cert)
}

// optional .CMsgSteamNetworkingIdentity identity = 10;
inline bool CMsgSteamSockets_UDP_ConnectOK::has_identity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_has_identity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamSockets_UDP_ConnectOK::clear_has_identity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgSteamNetworkingIdentity& CMsgSteamSockets_UDP_ConnectOK::_internal_identity() const {
  return *identity_;
}
inline const ::CMsgSteamNetworkingIdentity& CMsgSteamSockets_UDP_ConnectOK::identity() const {
  const ::CMsgSteamNetworkingIdentity* p = identity_;
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_ConnectOK.identity)
  return p != NULL ? *p : *reinterpret_cast<const ::CMsgSteamNetworkingIdentity*>(
      &::_CMsgSteamNetworkingIdentity_default_instance_);
}
inline ::CMsgSteamNetworkingIdentity* CMsgSteamSockets_UDP_ConnectOK::release_identity() {
  // @@protoc_insertion_point(field_release:CMsgSteamSockets_UDP_ConnectOK.identity)
  clear_has_identity();
  ::CMsgSteamNetworkingIdentity* temp = identity_;
  identity_ = NULL;
  return temp;
}
inline ::CMsgSteamNetworkingIdentity* CMsgSteamSockets_UDP_ConnectOK::mutable_identity() {
  set_has_identity();
  if (identity_ == NULL) {
    auto* p = CreateMaybeMessage<::CMsgSteamNetworkingIdentity>(GetArenaNoVirtual());
    identity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CMsgSteamSockets_UDP_ConnectOK.identity)
  return identity_;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_allocated_identity(::CMsgSteamNetworkingIdentity* identity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(identity_);
  }
  if (identity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      identity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, identity, submessage_arena);
    }
    set_has_identity();
  } else {
    clear_has_identity();
  }
  identity_ = identity;
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamSockets_UDP_ConnectOK.identity)
}

// optional fixed64 legacy_server_steam_id = 2;
inline bool CMsgSteamSockets_UDP_ConnectOK::has_legacy_server_steam_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_has_legacy_server_steam_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamSockets_UDP_ConnectOK::clear_has_legacy_server_steam_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamSockets_UDP_ConnectOK::clear_legacy_server_steam_id() {
  legacy_server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_legacy_server_steam_id();
}
inline ::google::protobuf::uint64 CMsgSteamSockets_UDP_ConnectOK::legacy_server_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_ConnectOK.legacy_server_steam_id)
  return legacy_server_steam_id_;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_legacy_server_steam_id(::google::protobuf::uint64 value) {
  set_has_legacy_server_steam_id();
  legacy_server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamSockets_UDP_ConnectOK.legacy_server_steam_id)
}

// -------------------------------------------------------------------

// CMsgSteamSockets_UDP_ConnectionClosed

// optional fixed32 to_connection_id = 4;
inline bool CMsgSteamSockets_UDP_ConnectionClosed::has_to_connection_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::set_has_to_connection_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::clear_has_to_connection_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::clear_to_connection_id() {
  to_connection_id_ = 0u;
  clear_has_to_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_ConnectionClosed::to_connection_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_ConnectionClosed.to_connection_id)
  return to_connection_id_;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::set_to_connection_id(::google::protobuf::uint32 value) {
  set_has_to_connection_id();
  to_connection_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamSockets_UDP_ConnectionClosed.to_connection_id)
}

// optional fixed32 from_connection_id = 5;
inline bool CMsgSteamSockets_UDP_ConnectionClosed::has_from_connection_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::set_has_from_connection_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::clear_has_from_connection_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::clear_from_connection_id() {
  from_connection_id_ = 0u;
  clear_has_from_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_ConnectionClosed::from_connection_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_ConnectionClosed.from_connection_id)
  return from_connection_id_;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::set_from_connection_id(::google::protobuf::uint32 value) {
  set_has_from_connection_id();
  from_connection_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamSockets_UDP_ConnectionClosed.from_connection_id)
}

// optional string debug = 2;
inline bool CMsgSteamSockets_UDP_ConnectionClosed::has_debug() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::set_has_debug() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::clear_has_debug() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::clear_debug() {
  debug_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_debug();
}
inline const ::std::string& CMsgSteamSockets_UDP_ConnectionClosed::debug() const {
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_ConnectionClosed.debug)
  return debug_.GetNoArena();
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::set_debug(const ::std::string& value) {
  set_has_debug();
  debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgSteamSockets_UDP_ConnectionClosed.debug)
}
#if LANG_CXX11
inline void CMsgSteamSockets_UDP_ConnectionClosed::set_debug(::std::string&& value) {
  set_has_debug();
  debug_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgSteamSockets_UDP_ConnectionClosed.debug)
}
#endif
inline void CMsgSteamSockets_UDP_ConnectionClosed::set_debug(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_debug();
  debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgSteamSockets_UDP_ConnectionClosed.debug)
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::set_debug(const char* value, size_t size) {
  set_has_debug();
  debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgSteamSockets_UDP_ConnectionClosed.debug)
}
inline ::std::string* CMsgSteamSockets_UDP_ConnectionClosed::mutable_debug() {
  set_has_debug();
  // @@protoc_insertion_point(field_mutable:CMsgSteamSockets_UDP_ConnectionClosed.debug)
  return debug_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamSockets_UDP_ConnectionClosed::release_debug() {
  // @@protoc_insertion_point(field_release:CMsgSteamSockets_UDP_ConnectionClosed.debug)
  if (!has_debug()) {
    return NULL;
  }
  clear_has_debug();
  return debug_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::set_allocated_debug(::std::string* debug) {
  if (debug != NULL) {
    set_has_debug();
  } else {
    clear_has_debug();
  }
  debug_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), debug);
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamSockets_UDP_ConnectionClosed.debug)
}

// optional uint32 reason_code = 3;
inline bool CMsgSteamSockets_UDP_ConnectionClosed::has_reason_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::set_has_reason_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::clear_has_reason_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::clear_reason_code() {
  reason_code_ = 0u;
  clear_has_reason_code();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_ConnectionClosed::reason_code() const {
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_ConnectionClosed.reason_code)
  return reason_code_;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::set_reason_code(::google::protobuf::uint32 value) {
  set_has_reason_code();
  reason_code_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamSockets_UDP_ConnectionClosed.reason_code)
}

// -------------------------------------------------------------------

// CMsgSteamSockets_UDP_NoConnection

// optional fixed32 from_connection_id = 2;
inline bool CMsgSteamSockets_UDP_NoConnection::has_from_connection_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamSockets_UDP_NoConnection::set_has_from_connection_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamSockets_UDP_NoConnection::clear_has_from_connection_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamSockets_UDP_NoConnection::clear_from_connection_id() {
  from_connection_id_ = 0u;
  clear_has_from_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_NoConnection::from_connection_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_NoConnection.from_connection_id)
  return from_connection_id_;
}
inline void CMsgSteamSockets_UDP_NoConnection::set_from_connection_id(::google::protobuf::uint32 value) {
  set_has_from_connection_id();
  from_connection_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamSockets_UDP_NoConnection.from_connection_id)
}

// optional fixed32 to_connection_id = 3;
inline bool CMsgSteamSockets_UDP_NoConnection::has_to_connection_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamSockets_UDP_NoConnection::set_has_to_connection_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamSockets_UDP_NoConnection::clear_has_to_connection_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamSockets_UDP_NoConnection::clear_to_connection_id() {
  to_connection_id_ = 0u;
  clear_has_to_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_NoConnection::to_connection_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_NoConnection.to_connection_id)
  return to_connection_id_;
}
inline void CMsgSteamSockets_UDP_NoConnection::set_to_connection_id(::google::protobuf::uint32 value) {
  set_has_to_connection_id();
  to_connection_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamSockets_UDP_NoConnection.to_connection_id)
}

// -------------------------------------------------------------------

// CMsgSteamSockets_UDP_Stats

// optional .CMsgSteamDatagramConnectionQuality stats = 1;
inline bool CMsgSteamSockets_UDP_Stats::has_stats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamSockets_UDP_Stats::set_has_stats() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamSockets_UDP_Stats::clear_has_stats() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgSteamDatagramConnectionQuality& CMsgSteamSockets_UDP_Stats::_internal_stats() const {
  return *stats_;
}
inline const ::CMsgSteamDatagramConnectionQuality& CMsgSteamSockets_UDP_Stats::stats() const {
  const ::CMsgSteamDatagramConnectionQuality* p = stats_;
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_Stats.stats)
  return p != NULL ? *p : *reinterpret_cast<const ::CMsgSteamDatagramConnectionQuality*>(
      &::_CMsgSteamDatagramConnectionQuality_default_instance_);
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamSockets_UDP_Stats::release_stats() {
  // @@protoc_insertion_point(field_release:CMsgSteamSockets_UDP_Stats.stats)
  clear_has_stats();
  ::CMsgSteamDatagramConnectionQuality* temp = stats_;
  stats_ = NULL;
  return temp;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamSockets_UDP_Stats::mutable_stats() {
  set_has_stats();
  if (stats_ == NULL) {
    auto* p = CreateMaybeMessage<::CMsgSteamDatagramConnectionQuality>(GetArenaNoVirtual());
    stats_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CMsgSteamSockets_UDP_Stats.stats)
  return stats_;
}
inline void CMsgSteamSockets_UDP_Stats::set_allocated_stats(::CMsgSteamDatagramConnectionQuality* stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(stats_);
  }
  if (stats) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stats = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    set_has_stats();
  } else {
    clear_has_stats();
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamSockets_UDP_Stats.stats)
}

// optional uint32 flags = 3;
inline bool CMsgSteamSockets_UDP_Stats::has_flags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamSockets_UDP_Stats::set_has_flags() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamSockets_UDP_Stats::clear_has_flags() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamSockets_UDP_Stats::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_Stats::flags() const {
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_Stats.flags)
  return flags_;
}
inline void CMsgSteamSockets_UDP_Stats::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamSockets_UDP_Stats.flags)
}

// optional fixed32 to_connection_id = 9;
inline bool CMsgSteamSockets_UDP_Stats::has_to_connection_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamSockets_UDP_Stats::set_has_to_connection_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamSockets_UDP_Stats::clear_has_to_connection_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamSockets_UDP_Stats::clear_to_connection_id() {
  to_connection_id_ = 0u;
  clear_has_to_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_Stats::to_connection_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_Stats.to_connection_id)
  return to_connection_id_;
}
inline void CMsgSteamSockets_UDP_Stats::set_to_connection_id(::google::protobuf::uint32 value) {
  set_has_to_connection_id();
  to_connection_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamSockets_UDP_Stats.to_connection_id)
}

// optional fixed32 from_connection_id = 10;
inline bool CMsgSteamSockets_UDP_Stats::has_from_connection_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamSockets_UDP_Stats::set_has_from_connection_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamSockets_UDP_Stats::clear_has_from_connection_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamSockets_UDP_Stats::clear_from_connection_id() {
  from_connection_id_ = 0u;
  clear_has_from_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_Stats::from_connection_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_Stats.from_connection_id)
  return from_connection_id_;
}
inline void CMsgSteamSockets_UDP_Stats::set_from_connection_id(::google::protobuf::uint32 value) {
  set_has_from_connection_id();
  from_connection_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamSockets_UDP_Stats.from_connection_id)
}

// optional uint32 seq_num = 4;
inline bool CMsgSteamSockets_UDP_Stats::has_seq_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamSockets_UDP_Stats::set_has_seq_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamSockets_UDP_Stats::clear_has_seq_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamSockets_UDP_Stats::clear_seq_num() {
  seq_num_ = 0u;
  clear_has_seq_num();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_Stats::seq_num() const {
  // @@protoc_insertion_point(field_get:CMsgSteamSockets_UDP_Stats.seq_num)
  return seq_num_;
}
inline void CMsgSteamSockets_UDP_Stats::set_seq_num(::google::protobuf::uint32 value) {
  set_has_seq_num();
  seq_num_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamSockets_UDP_Stats.seq_num)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::CMsgSteamSockets_UDP_Stats_Flags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgSteamSockets_UDP_Stats_Flags>() {
  return ::CMsgSteamSockets_UDP_Stats_Flags_descriptor();
}
template <> struct is_proto_enum< ::ESteamNetworkingUDPMsgID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ESteamNetworkingUDPMsgID>() {
  return ::ESteamNetworkingUDPMsgID_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_steamnetworkingsockets_5fmessages_5fudp_2eproto
