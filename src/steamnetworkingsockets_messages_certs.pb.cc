// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamnetworkingsockets_messages_certs.proto

#include "steamnetworkingsockets_messages_certs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamNetworkingIdentity;
}  // namespace protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto
class CMsgSteamNetworkingIdentityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamNetworkingIdentity>
      _instance;
} _CMsgSteamNetworkingIdentity_default_instance_;
class CMsgSteamDatagramCertificateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramCertificate>
      _instance;
} _CMsgSteamDatagramCertificate_default_instance_;
class CMsgSteamDatagramCertificateSignedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramCertificateSigned>
      _instance;
} _CMsgSteamDatagramCertificateSigned_default_instance_;
namespace protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto {
static void InitDefaultsCMsgSteamNetworkingIdentity() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamNetworkingIdentity_default_instance_;
    new (ptr) ::CMsgSteamNetworkingIdentity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamNetworkingIdentity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamNetworkingIdentity =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamNetworkingIdentity}, {}};

static void InitDefaultsCMsgSteamDatagramCertificate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamDatagramCertificate_default_instance_;
    new (ptr) ::CMsgSteamDatagramCertificate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramCertificate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSteamDatagramCertificate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSteamDatagramCertificate}, {
      &protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto::scc_info_CMsgSteamNetworkingIdentity.base,}};

static void InitDefaultsCMsgSteamDatagramCertificateSigned() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamDatagramCertificateSigned_default_instance_;
    new (ptr) ::CMsgSteamDatagramCertificateSigned();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramCertificateSigned::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramCertificateSigned =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramCertificateSigned}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamNetworkingIdentity.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramCertificate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramCertificateSigned.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingIdentity, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingIdentity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingIdentity, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingIdentity, generic_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingIdentity, generic_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamNetworkingIdentity, ipv6_and_port_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramCertificate, key_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramCertificate, key_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramCertificate, legacy_steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramCertificate, identity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramCertificate, gameserver_datacenter_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramCertificate, time_created_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramCertificate, time_expiry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramCertificate, app_ids_),
  3,
  0,
  2,
  1,
  ~0u,
  4,
  5,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, cert_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, ca_key_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, ca_signature_),
  0,
  2,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::CMsgSteamNetworkingIdentity)},
  { 13, 26, sizeof(::CMsgSteamDatagramCertificate)},
  { 34, 42, sizeof(::CMsgSteamDatagramCertificateSigned)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamNetworkingIdentity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramCertificate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramCertificateSigned_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "steamnetworkingsockets_messages_certs.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n+steamnetworkingsockets_messages_certs."
      "proto\"u\n\033CMsgSteamNetworkingIdentity\022\020\n\010"
      "steam_id\030\020 \001(\006\022\025\n\rgeneric_bytes\030\002 \001(\014\022\026\n"
      "\016generic_string\030\003 \001(\t\022\025\n\ripv6_and_port\030\004"
      " \001(\014\"\270\002\n\034CMsgSteamDatagramCertificate\0228\n"
      "\010key_type\030\001 \001(\0162&.CMsgSteamDatagramCerti"
      "ficate.EKeyType\022\020\n\010key_data\030\002 \001(\014\022\027\n\017leg"
      "acy_steam_id\030\004 \001(\006\022.\n\010identity\030\013 \001(\0132\034.C"
      "MsgSteamNetworkingIdentity\022!\n\031gameserver"
      "_datacenter_ids\030\005 \003(\007\022\024\n\014time_created\030\010 "
      "\001(\007\022\023\n\013time_expiry\030\t \001(\007\022\017\n\007app_ids\030\n \003("
      "\r\"$\n\010EKeyType\022\013\n\007INVALID\020\000\022\013\n\007ED25519\020\001\""
      "[\n\"CMsgSteamDatagramCertificateSigned\022\014\n"
      "\004cert\030\004 \001(\014\022\021\n\tca_key_id\030\005 \001(\006\022\024\n\014ca_sig"
      "nature\030\006 \001(\014B\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 579);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steamnetworkingsockets_messages_certs.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramCertificate_EKeyType_descriptor() {
  protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto::file_level_enum_descriptors[0];
}
bool CMsgSteamDatagramCertificate_EKeyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::INVALID;
const CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::ED25519;
const CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::EKeyType_MIN;
const CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::EKeyType_MAX;
const int CMsgSteamDatagramCertificate::EKeyType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void CMsgSteamNetworkingIdentity::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamNetworkingIdentity::kSteamIdFieldNumber;
const int CMsgSteamNetworkingIdentity::kGenericBytesFieldNumber;
const int CMsgSteamNetworkingIdentity::kGenericStringFieldNumber;
const int CMsgSteamNetworkingIdentity::kIpv6AndPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamNetworkingIdentity::CMsgSteamNetworkingIdentity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto::scc_info_CMsgSteamNetworkingIdentity.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamNetworkingIdentity)
}
CMsgSteamNetworkingIdentity::CMsgSteamNetworkingIdentity(const CMsgSteamNetworkingIdentity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  generic_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_generic_bytes()) {
    generic_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generic_bytes_);
  }
  generic_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_generic_string()) {
    generic_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generic_string_);
  }
  ipv6_and_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ipv6_and_port()) {
    ipv6_and_port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipv6_and_port_);
  }
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgSteamNetworkingIdentity)
}

void CMsgSteamNetworkingIdentity::SharedCtor() {
  generic_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generic_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipv6_and_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam_id_ = GOOGLE_ULONGLONG(0);
}

CMsgSteamNetworkingIdentity::~CMsgSteamNetworkingIdentity() {
  // @@protoc_insertion_point(destructor:CMsgSteamNetworkingIdentity)
  SharedDtor();
}

void CMsgSteamNetworkingIdentity::SharedDtor() {
  generic_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generic_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipv6_and_port_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamNetworkingIdentity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgSteamNetworkingIdentity::descriptor() {
  ::protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamNetworkingIdentity& CMsgSteamNetworkingIdentity::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto::scc_info_CMsgSteamNetworkingIdentity.base);
  return *internal_default_instance();
}


void CMsgSteamNetworkingIdentity::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamNetworkingIdentity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      generic_bytes_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      generic_string_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      ipv6_and_port_.ClearNonDefaultToEmptyNoArena();
    }
  }
  steam_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamNetworkingIdentity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamNetworkingIdentity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes generic_bytes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_generic_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string generic_string = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_generic_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->generic_string().data(), static_cast<int>(this->generic_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgSteamNetworkingIdentity.generic_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ipv6_and_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ipv6_and_port()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamNetworkingIdentity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamNetworkingIdentity)
  return false;
#undef DO_
}

void CMsgSteamNetworkingIdentity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamNetworkingIdentity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes generic_bytes = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->generic_bytes(), output);
  }

  // optional string generic_string = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->generic_string().data(), static_cast<int>(this->generic_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamNetworkingIdentity.generic_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->generic_string(), output);
  }

  // optional bytes ipv6_and_port = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->ipv6_and_port(), output);
  }

  // optional fixed64 steam_id = 16;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(16, this->steam_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamNetworkingIdentity)
}

::google::protobuf::uint8* CMsgSteamNetworkingIdentity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamNetworkingIdentity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes generic_bytes = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->generic_bytes(), target);
  }

  // optional string generic_string = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->generic_string().data(), static_cast<int>(this->generic_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamNetworkingIdentity.generic_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->generic_string(), target);
  }

  // optional bytes ipv6_and_port = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->ipv6_and_port(), target);
  }

  // optional fixed64 steam_id = 16;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(16, this->steam_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamNetworkingIdentity)
  return target;
}

size_t CMsgSteamNetworkingIdentity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamNetworkingIdentity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes generic_bytes = 2;
    if (has_generic_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->generic_bytes());
    }

    // optional string generic_string = 3;
    if (has_generic_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->generic_string());
    }

    // optional bytes ipv6_and_port = 4;
    if (has_ipv6_and_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ipv6_and_port());
    }

    // optional fixed64 steam_id = 16;
    if (has_steam_id()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamNetworkingIdentity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamNetworkingIdentity)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamNetworkingIdentity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamNetworkingIdentity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamNetworkingIdentity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamNetworkingIdentity)
    MergeFrom(*source);
  }
}

void CMsgSteamNetworkingIdentity::MergeFrom(const CMsgSteamNetworkingIdentity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamNetworkingIdentity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_generic_bytes();
      generic_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generic_bytes_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_generic_string();
      generic_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generic_string_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_ipv6_and_port();
      ipv6_and_port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipv6_and_port_);
    }
    if (cached_has_bits & 0x00000008u) {
      steam_id_ = from.steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamNetworkingIdentity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamNetworkingIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamNetworkingIdentity::CopyFrom(const CMsgSteamNetworkingIdentity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamNetworkingIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamNetworkingIdentity::IsInitialized() const {
  return true;
}

void CMsgSteamNetworkingIdentity::Swap(CMsgSteamNetworkingIdentity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamNetworkingIdentity::InternalSwap(CMsgSteamNetworkingIdentity* other) {
  using std::swap;
  generic_bytes_.Swap(&other->generic_bytes_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  generic_string_.Swap(&other->generic_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ipv6_and_port_.Swap(&other->ipv6_and_port_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_, other->steam_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgSteamNetworkingIdentity::GetMetadata() const {
  protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramCertificate::InitAsDefaultInstance() {
  ::_CMsgSteamDatagramCertificate_default_instance_._instance.get_mutable()->identity_ = const_cast< ::CMsgSteamNetworkingIdentity*>(
      ::CMsgSteamNetworkingIdentity::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramCertificate::kKeyTypeFieldNumber;
const int CMsgSteamDatagramCertificate::kKeyDataFieldNumber;
const int CMsgSteamDatagramCertificate::kLegacySteamIdFieldNumber;
const int CMsgSteamDatagramCertificate::kIdentityFieldNumber;
const int CMsgSteamDatagramCertificate::kGameserverDatacenterIdsFieldNumber;
const int CMsgSteamDatagramCertificate::kTimeCreatedFieldNumber;
const int CMsgSteamDatagramCertificate::kTimeExpiryFieldNumber;
const int CMsgSteamDatagramCertificate::kAppIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramCertificate::CMsgSteamDatagramCertificate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto::scc_info_CMsgSteamDatagramCertificate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramCertificate)
}
CMsgSteamDatagramCertificate::CMsgSteamDatagramCertificate(const CMsgSteamDatagramCertificate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      gameserver_datacenter_ids_(from.gameserver_datacenter_ids_),
      app_ids_(from.app_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key_data()) {
    key_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_data_);
  }
  if (from.has_identity()) {
    identity_ = new ::CMsgSteamNetworkingIdentity(*from.identity_);
  } else {
    identity_ = NULL;
  }
  ::memcpy(&legacy_steam_id_, &from.legacy_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_expiry_) -
    reinterpret_cast<char*>(&legacy_steam_id_)) + sizeof(time_expiry_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramCertificate)
}

void CMsgSteamDatagramCertificate::SharedCtor() {
  key_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&identity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_expiry_) -
      reinterpret_cast<char*>(&identity_)) + sizeof(time_expiry_));
}

CMsgSteamDatagramCertificate::~CMsgSteamDatagramCertificate() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramCertificate)
  SharedDtor();
}

void CMsgSteamDatagramCertificate::SharedDtor() {
  key_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete identity_;
}

void CMsgSteamDatagramCertificate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramCertificate::descriptor() {
  ::protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramCertificate& CMsgSteamDatagramCertificate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto::scc_info_CMsgSteamDatagramCertificate.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramCertificate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramCertificate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameserver_datacenter_ids_.Clear();
  app_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      key_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(identity_ != NULL);
      identity_->Clear();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&legacy_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_expiry_) -
        reinterpret_cast<char*>(&legacy_steam_id_)) + sizeof(time_expiry_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramCertificate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramCertificate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgSteamDatagramCertificate_EKeyType_IsValid(value)) {
            set_key_type(static_cast< ::CMsgSteamDatagramCertificate_EKeyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes key_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 legacy_steam_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_legacy_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &legacy_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 gameserver_datacenter_ids = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 45u, input, this->mutable_gameserver_datacenter_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_gameserver_datacenter_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 time_created = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_time_created();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 time_expiry = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_time_expiry();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_expiry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 app_ids = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80u, input, this->mutable_app_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_app_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgSteamNetworkingIdentity identity = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_identity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramCertificate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramCertificate)
  return false;
#undef DO_
}

void CMsgSteamDatagramCertificate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramCertificate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->key_type(), output);
  }

  // optional bytes key_data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key_data(), output);
  }

  // optional fixed64 legacy_steam_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->legacy_steam_id(), output);
  }

  // repeated fixed32 gameserver_datacenter_ids = 5;
  for (int i = 0, n = this->gameserver_datacenter_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      5, this->gameserver_datacenter_ids(i), output);
  }

  // optional fixed32 time_created = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->time_created(), output);
  }

  // optional fixed32 time_expiry = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->time_expiry(), output);
  }

  // repeated uint32 app_ids = 10;
  for (int i = 0, n = this->app_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->app_ids(i), output);
  }

  // optional .CMsgSteamNetworkingIdentity identity = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_identity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramCertificate)
}

::google::protobuf::uint8* CMsgSteamDatagramCertificate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramCertificate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->key_type(), target);
  }

  // optional bytes key_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key_data(), target);
  }

  // optional fixed64 legacy_steam_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->legacy_steam_id(), target);
  }

  // repeated fixed32 gameserver_datacenter_ids = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(5, this->gameserver_datacenter_ids_, target);

  // optional fixed32 time_created = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->time_created(), target);
  }

  // optional fixed32 time_expiry = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->time_expiry(), target);
  }

  // repeated uint32 app_ids = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(10, this->app_ids_, target);

  // optional .CMsgSteamNetworkingIdentity identity = 11;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_identity(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramCertificate)
  return target;
}

size_t CMsgSteamDatagramCertificate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramCertificate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated fixed32 gameserver_datacenter_ids = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->gameserver_datacenter_ids_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->gameserver_datacenter_ids_size());
    total_size += data_size;
  }

  // repeated uint32 app_ids = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->app_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->app_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional bytes key_data = 2;
    if (has_key_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key_data());
    }

    // optional .CMsgSteamNetworkingIdentity identity = 11;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *identity_);
    }

    // optional fixed64 legacy_steam_id = 4;
    if (has_legacy_steam_id()) {
      total_size += 1 + 8;
    }

    // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1;
    if (has_key_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->key_type());
    }

    // optional fixed32 time_created = 8;
    if (has_time_created()) {
      total_size += 1 + 4;
    }

    // optional fixed32 time_expiry = 9;
    if (has_time_expiry()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramCertificate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramCertificate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramCertificate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramCertificate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramCertificate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramCertificate)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramCertificate::MergeFrom(const CMsgSteamDatagramCertificate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramCertificate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gameserver_datacenter_ids_.MergeFrom(from.gameserver_datacenter_ids_);
  app_ids_.MergeFrom(from.app_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key_data();
      key_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_identity()->::CMsgSteamNetworkingIdentity::MergeFrom(from.identity());
    }
    if (cached_has_bits & 0x00000004u) {
      legacy_steam_id_ = from.legacy_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      key_type_ = from.key_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_expiry_ = from.time_expiry_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramCertificate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramCertificate::CopyFrom(const CMsgSteamDatagramCertificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramCertificate::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramCertificate::Swap(CMsgSteamDatagramCertificate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramCertificate::InternalSwap(CMsgSteamDatagramCertificate* other) {
  using std::swap;
  gameserver_datacenter_ids_.InternalSwap(&other->gameserver_datacenter_ids_);
  app_ids_.InternalSwap(&other->app_ids_);
  key_data_.Swap(&other->key_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(identity_, other->identity_);
  swap(legacy_steam_id_, other->legacy_steam_id_);
  swap(key_type_, other->key_type_);
  swap(time_created_, other->time_created_);
  swap(time_expiry_, other->time_expiry_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgSteamDatagramCertificate::GetMetadata() const {
  protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramCertificateSigned::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramCertificateSigned::kCertFieldNumber;
const int CMsgSteamDatagramCertificateSigned::kCaKeyIdFieldNumber;
const int CMsgSteamDatagramCertificateSigned::kCaSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramCertificateSigned::CMsgSteamDatagramCertificateSigned()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto::scc_info_CMsgSteamDatagramCertificateSigned.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramCertificateSigned)
}
CMsgSteamDatagramCertificateSigned::CMsgSteamDatagramCertificateSigned(const CMsgSteamDatagramCertificateSigned& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cert_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cert()) {
    cert_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cert_);
  }
  ca_signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ca_signature()) {
    ca_signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ca_signature_);
  }
  ca_key_id_ = from.ca_key_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramCertificateSigned)
}

void CMsgSteamDatagramCertificateSigned::SharedCtor() {
  cert_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ca_signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ca_key_id_ = GOOGLE_ULONGLONG(0);
}

CMsgSteamDatagramCertificateSigned::~CMsgSteamDatagramCertificateSigned() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramCertificateSigned)
  SharedDtor();
}

void CMsgSteamDatagramCertificateSigned::SharedDtor() {
  cert_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ca_signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramCertificateSigned::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramCertificateSigned::descriptor() {
  ::protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramCertificateSigned& CMsgSteamDatagramCertificateSigned::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto::scc_info_CMsgSteamDatagramCertificateSigned.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramCertificateSigned::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramCertificateSigned)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      cert_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      ca_signature_.ClearNonDefaultToEmptyNoArena();
    }
  }
  ca_key_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramCertificateSigned::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramCertificateSigned)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes cert = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 ca_key_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_ca_key_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ca_key_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ca_signature = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ca_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramCertificateSigned)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramCertificateSigned)
  return false;
#undef DO_
}

void CMsgSteamDatagramCertificateSigned::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramCertificateSigned)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes cert = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->cert(), output);
  }

  // optional fixed64 ca_key_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->ca_key_id(), output);
  }

  // optional bytes ca_signature = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->ca_signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramCertificateSigned)
}

::google::protobuf::uint8* CMsgSteamDatagramCertificateSigned::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramCertificateSigned)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes cert = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->cert(), target);
  }

  // optional fixed64 ca_key_id = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->ca_key_id(), target);
  }

  // optional bytes ca_signature = 6;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->ca_signature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramCertificateSigned)
  return target;
}

size_t CMsgSteamDatagramCertificateSigned::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramCertificateSigned)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes cert = 4;
    if (has_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cert());
    }

    // optional bytes ca_signature = 6;
    if (has_ca_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ca_signature());
    }

    // optional fixed64 ca_key_id = 5;
    if (has_ca_key_id()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramCertificateSigned::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramCertificateSigned)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramCertificateSigned* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramCertificateSigned>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramCertificateSigned)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramCertificateSigned)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramCertificateSigned::MergeFrom(const CMsgSteamDatagramCertificateSigned& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramCertificateSigned)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_cert();
      cert_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cert_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_ca_signature();
      ca_signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ca_signature_);
    }
    if (cached_has_bits & 0x00000004u) {
      ca_key_id_ = from.ca_key_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramCertificateSigned::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramCertificateSigned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramCertificateSigned::CopyFrom(const CMsgSteamDatagramCertificateSigned& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramCertificateSigned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramCertificateSigned::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramCertificateSigned::Swap(CMsgSteamDatagramCertificateSigned* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramCertificateSigned::InternalSwap(CMsgSteamDatagramCertificateSigned* other) {
  using std::swap;
  cert_.Swap(&other->cert_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ca_signature_.Swap(&other->ca_signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ca_key_id_, other->ca_key_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgSteamDatagramCertificateSigned::GetMetadata() const {
  protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgSteamNetworkingIdentity* Arena::CreateMaybeMessage< ::CMsgSteamNetworkingIdentity >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgSteamNetworkingIdentity >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgSteamDatagramCertificate* Arena::CreateMaybeMessage< ::CMsgSteamDatagramCertificate >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgSteamDatagramCertificate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgSteamDatagramCertificateSigned* Arena::CreateMaybeMessage< ::CMsgSteamDatagramCertificateSigned >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgSteamDatagramCertificateSigned >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
