// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamnetworkingsockets_messages_udp.proto

#include "steamnetworkingsockets_messages_udp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_steamnetworkingsockets_5fmessages_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steamnetworkingsockets_5fmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramSessionCryptInfoSigned;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steamnetworkingsockets_5fmessages_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CMsgSteamDatagramConnectionQuality;
}  // namespace protobuf_steamnetworkingsockets_5fmessages_2eproto
namespace protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramCertificateSigned;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamNetworkingIdentity;
}  // namespace protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto
class CMsgSteamSockets_UDP_ChallengeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamSockets_UDP_ChallengeRequest>
      _instance;
} _CMsgSteamSockets_UDP_ChallengeRequest_default_instance_;
class CMsgSteamSockets_UDP_ChallengeReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamSockets_UDP_ChallengeReply>
      _instance;
} _CMsgSteamSockets_UDP_ChallengeReply_default_instance_;
class CMsgSteamSockets_UDP_ConnectRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamSockets_UDP_ConnectRequest>
      _instance;
} _CMsgSteamSockets_UDP_ConnectRequest_default_instance_;
class CMsgSteamSockets_UDP_ConnectOKDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamSockets_UDP_ConnectOK>
      _instance;
} _CMsgSteamSockets_UDP_ConnectOK_default_instance_;
class CMsgSteamSockets_UDP_ConnectionClosedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamSockets_UDP_ConnectionClosed>
      _instance;
} _CMsgSteamSockets_UDP_ConnectionClosed_default_instance_;
class CMsgSteamSockets_UDP_NoConnectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamSockets_UDP_NoConnection>
      _instance;
} _CMsgSteamSockets_UDP_NoConnection_default_instance_;
class CMsgSteamSockets_UDP_StatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamSockets_UDP_Stats>
      _instance;
} _CMsgSteamSockets_UDP_Stats_default_instance_;
namespace protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto {
static void InitDefaultsCMsgSteamSockets_UDP_ChallengeRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamSockets_UDP_ChallengeRequest_default_instance_;
    new (ptr) ::CMsgSteamSockets_UDP_ChallengeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamSockets_UDP_ChallengeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamSockets_UDP_ChallengeRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamSockets_UDP_ChallengeRequest}, {}};

static void InitDefaultsCMsgSteamSockets_UDP_ChallengeReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamSockets_UDP_ChallengeReply_default_instance_;
    new (ptr) ::CMsgSteamSockets_UDP_ChallengeReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamSockets_UDP_ChallengeReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamSockets_UDP_ChallengeReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamSockets_UDP_ChallengeReply}, {}};

static void InitDefaultsCMsgSteamSockets_UDP_ConnectRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamSockets_UDP_ConnectRequest_default_instance_;
    new (ptr) ::CMsgSteamSockets_UDP_ConnectRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamSockets_UDP_ConnectRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CMsgSteamSockets_UDP_ConnectRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCMsgSteamSockets_UDP_ConnectRequest}, {
      &protobuf_steamnetworkingsockets_5fmessages_2eproto::scc_info_CMsgSteamDatagramSessionCryptInfoSigned.base,
      &protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto::scc_info_CMsgSteamDatagramCertificateSigned.base,
      &protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto::scc_info_CMsgSteamNetworkingIdentity.base,}};

static void InitDefaultsCMsgSteamSockets_UDP_ConnectOK() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamSockets_UDP_ConnectOK_default_instance_;
    new (ptr) ::CMsgSteamSockets_UDP_ConnectOK();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamSockets_UDP_ConnectOK::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CMsgSteamSockets_UDP_ConnectOK =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCMsgSteamSockets_UDP_ConnectOK}, {
      &protobuf_steamnetworkingsockets_5fmessages_2eproto::scc_info_CMsgSteamDatagramSessionCryptInfoSigned.base,
      &protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto::scc_info_CMsgSteamDatagramCertificateSigned.base,
      &protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto::scc_info_CMsgSteamNetworkingIdentity.base,}};

static void InitDefaultsCMsgSteamSockets_UDP_ConnectionClosed() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamSockets_UDP_ConnectionClosed_default_instance_;
    new (ptr) ::CMsgSteamSockets_UDP_ConnectionClosed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamSockets_UDP_ConnectionClosed::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamSockets_UDP_ConnectionClosed =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamSockets_UDP_ConnectionClosed}, {}};

static void InitDefaultsCMsgSteamSockets_UDP_NoConnection() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamSockets_UDP_NoConnection_default_instance_;
    new (ptr) ::CMsgSteamSockets_UDP_NoConnection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamSockets_UDP_NoConnection::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamSockets_UDP_NoConnection =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamSockets_UDP_NoConnection}, {}};

static void InitDefaultsCMsgSteamSockets_UDP_Stats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamSockets_UDP_Stats_default_instance_;
    new (ptr) ::CMsgSteamSockets_UDP_Stats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamSockets_UDP_Stats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSteamSockets_UDP_Stats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSteamSockets_UDP_Stats}, {
      &protobuf_steamnetworkingsockets_5fmessages_2eproto::scc_info_CMsgSteamDatagramConnectionQuality.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamSockets_UDP_ChallengeRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamSockets_UDP_ChallengeReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamSockets_UDP_ConnectRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamSockets_UDP_ConnectOK.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamSockets_UDP_ConnectionClosed.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamSockets_UDP_NoConnection.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamSockets_UDP_Stats.base);
}

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeRequest, connection_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeRequest, my_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeRequest, protocol_version_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeReply, connection_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeReply, challenge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeReply, your_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeReply, protocol_version_),
  1,
  0,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, client_connection_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, challenge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, my_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, ping_est_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, crypt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, cert_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, legacy_protocol_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, identity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, legacy_client_steam_id_),
  5,
  3,
  7,
  6,
  1,
  0,
  8,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, client_connection_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, server_connection_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, your_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, delay_time_usec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, crypt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, cert_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, identity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, legacy_server_steam_id_),
  4,
  7,
  6,
  5,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectionClosed, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectionClosed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectionClosed, to_connection_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectionClosed, from_connection_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectionClosed, debug_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectionClosed, reason_code_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_NoConnection, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_NoConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_NoConnection, from_connection_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_NoConnection, to_connection_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_Stats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_Stats, stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_Stats, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_Stats, to_connection_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_Stats, from_connection_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamSockets_UDP_Stats, seq_num_),
  0,
  1,
  3,
  4,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::CMsgSteamSockets_UDP_ChallengeRequest)},
  { 11, 20, sizeof(::CMsgSteamSockets_UDP_ChallengeReply)},
  { 24, 38, sizeof(::CMsgSteamSockets_UDP_ConnectRequest)},
  { 47, 60, sizeof(::CMsgSteamSockets_UDP_ConnectOK)},
  { 68, 77, sizeof(::CMsgSteamSockets_UDP_ConnectionClosed)},
  { 81, 88, sizeof(::CMsgSteamSockets_UDP_NoConnection)},
  { 90, 100, sizeof(::CMsgSteamSockets_UDP_Stats)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamSockets_UDP_ChallengeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamSockets_UDP_ChallengeReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamSockets_UDP_ConnectRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamSockets_UDP_ConnectOK_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamSockets_UDP_ConnectionClosed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamSockets_UDP_NoConnection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamSockets_UDP_Stats_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "steamnetworkingsockets_messages_udp.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n)steamnetworkingsockets_messages_udp.pr"
      "oto\032+steamnetworkingsockets_messages_cer"
      "ts.proto\032%steamnetworkingsockets_message"
      "s.proto\"n\n%CMsgSteamSockets_UDP_Challeng"
      "eRequest\022\025\n\rconnection_id\030\001 \001(\007\022\024\n\014my_ti"
      "mestamp\030\003 \001(\006\022\030\n\020protocol_version\030\004 \001(\r\""
      "\201\001\n#CMsgSteamSockets_UDP_ChallengeReply\022"
      "\025\n\rconnection_id\030\001 \001(\007\022\021\n\tchallenge\030\002 \001("
      "\006\022\026\n\016your_timestamp\030\003 \001(\006\022\030\n\020protocol_ve"
      "rsion\030\004 \001(\r\"\336\002\n#CMsgSteamSockets_UDP_Con"
      "nectRequest\022\034\n\024client_connection_id\030\001 \001("
      "\007\022\021\n\tchallenge\030\002 \001(\006\022\024\n\014my_timestamp\030\005 \001"
      "(\006\022\023\n\013ping_est_ms\030\006 \001(\r\0227\n\005crypt\030\007 \001(\0132("
      ".CMsgSteamDatagramSessionCryptInfoSigned"
      "\0221\n\004cert\030\004 \001(\0132#.CMsgSteamDatagramCertif"
      "icateSigned\022\037\n\027legacy_protocol_version\030\010"
      " \001(\r\022.\n\010identity\030\t \001(\0132\034.CMsgSteamNetwor"
      "kingIdentity\022\036\n\026legacy_client_steam_id\030\003"
      " \001(\006\"\311\002\n\036CMsgSteamSockets_UDP_ConnectOK\022"
      "\034\n\024client_connection_id\030\001 \001(\007\022\034\n\024server_"
      "connection_id\030\005 \001(\007\022\026\n\016your_timestamp\030\003 "
      "\001(\006\022\027\n\017delay_time_usec\030\004 \001(\r\0227\n\005crypt\030\007 "
      "\001(\0132(.CMsgSteamDatagramSessionCryptInfoS"
      "igned\0221\n\004cert\030\010 \001(\0132#.CMsgSteamDatagramC"
      "ertificateSigned\022.\n\010identity\030\n \001(\0132\034.CMs"
      "gSteamNetworkingIdentity\022\036\n\026legacy_serve"
      "r_steam_id\030\002 \001(\006\"\201\001\n%CMsgSteamSockets_UD"
      "P_ConnectionClosed\022\030\n\020to_connection_id\030\004"
      " \001(\007\022\032\n\022from_connection_id\030\005 \001(\007\022\r\n\005debu"
      "g\030\002 \001(\t\022\023\n\013reason_code\030\003 \001(\r\"Y\n!CMsgStea"
      "mSockets_UDP_NoConnection\022\032\n\022from_connec"
      "tion_id\030\002 \001(\007\022\030\n\020to_connection_id\030\003 \001(\007\""
      "\337\001\n\032CMsgSteamSockets_UDP_Stats\0222\n\005stats\030"
      "\001 \001(\0132#.CMsgSteamDatagramConnectionQuali"
      "ty\022\r\n\005flags\030\003 \001(\r\022\030\n\020to_connection_id\030\t "
      "\001(\007\022\032\n\022from_connection_id\030\n \001(\007\022\017\n\007seq_n"
      "um\030\004 \001(\r\"7\n\005Flags\022\023\n\017ACK_REQUEST_E2E\020\002\022\031"
      "\n\025ACK_REQUEST_IMMEDIATE\020\004*\245\002\n\030ESteamNetw"
      "orkingUDPMsgID\022-\n)k_ESteamNetworkingUDPM"
      "sg_ChallengeRequest\020 \022+\n\'k_ESteamNetwork"
      "ingUDPMsg_ChallengeReply\020!\022+\n\'k_ESteamNe"
      "tworkingUDPMsg_ConnectRequest\020\"\022&\n\"k_ESt"
      "eamNetworkingUDPMsg_ConnectOK\020#\022-\n)k_ESt"
      "eamNetworkingUDPMsg_ConnectionClosed\020$\022)"
      "\n%k_ESteamNetworkingUDPMsg_NoConnection\020"
      "%B\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1808);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steamnetworkingsockets_messages_udp.proto", &protobuf_RegisterTypes);
  ::protobuf_steamnetworkingsockets_5fmessages_5fcerts_2eproto::AddDescriptors();
  ::protobuf_steamnetworkingsockets_5fmessages_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto
const ::google::protobuf::EnumDescriptor* CMsgSteamSockets_UDP_Stats_Flags_descriptor() {
  protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::file_level_enum_descriptors[0];
}
bool CMsgSteamSockets_UDP_Stats_Flags_IsValid(int value) {
  switch (value) {
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgSteamSockets_UDP_Stats_Flags CMsgSteamSockets_UDP_Stats::ACK_REQUEST_E2E;
const CMsgSteamSockets_UDP_Stats_Flags CMsgSteamSockets_UDP_Stats::ACK_REQUEST_IMMEDIATE;
const CMsgSteamSockets_UDP_Stats_Flags CMsgSteamSockets_UDP_Stats::Flags_MIN;
const CMsgSteamSockets_UDP_Stats_Flags CMsgSteamSockets_UDP_Stats::Flags_MAX;
const int CMsgSteamSockets_UDP_Stats::Flags_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ESteamNetworkingUDPMsgID_descriptor() {
  protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::file_level_enum_descriptors[1];
}
bool ESteamNetworkingUDPMsgID_IsValid(int value) {
  switch (value) {
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CMsgSteamSockets_UDP_ChallengeRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamSockets_UDP_ChallengeRequest::kConnectionIdFieldNumber;
const int CMsgSteamSockets_UDP_ChallengeRequest::kMyTimestampFieldNumber;
const int CMsgSteamSockets_UDP_ChallengeRequest::kProtocolVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamSockets_UDP_ChallengeRequest::CMsgSteamSockets_UDP_ChallengeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::scc_info_CMsgSteamSockets_UDP_ChallengeRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamSockets_UDP_ChallengeRequest)
}
CMsgSteamSockets_UDP_ChallengeRequest::CMsgSteamSockets_UDP_ChallengeRequest(const CMsgSteamSockets_UDP_ChallengeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&connection_id_, &from.connection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&my_timestamp_) -
    reinterpret_cast<char*>(&connection_id_)) + sizeof(my_timestamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamSockets_UDP_ChallengeRequest)
}

void CMsgSteamSockets_UDP_ChallengeRequest::SharedCtor() {
  ::memset(&connection_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&my_timestamp_) -
      reinterpret_cast<char*>(&connection_id_)) + sizeof(my_timestamp_));
}

CMsgSteamSockets_UDP_ChallengeRequest::~CMsgSteamSockets_UDP_ChallengeRequest() {
  // @@protoc_insertion_point(destructor:CMsgSteamSockets_UDP_ChallengeRequest)
  SharedDtor();
}

void CMsgSteamSockets_UDP_ChallengeRequest::SharedDtor() {
}

void CMsgSteamSockets_UDP_ChallengeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgSteamSockets_UDP_ChallengeRequest::descriptor() {
  ::protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamSockets_UDP_ChallengeRequest& CMsgSteamSockets_UDP_ChallengeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::scc_info_CMsgSteamSockets_UDP_ChallengeRequest.base);
  return *internal_default_instance();
}


void CMsgSteamSockets_UDP_ChallengeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamSockets_UDP_ChallengeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&connection_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&my_timestamp_) -
        reinterpret_cast<char*>(&connection_id_)) + sizeof(my_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamSockets_UDP_ChallengeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamSockets_UDP_ChallengeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 connection_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_connection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 my_timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_my_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &my_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 protocol_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_protocol_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamSockets_UDP_ChallengeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamSockets_UDP_ChallengeRequest)
  return false;
#undef DO_
}

void CMsgSteamSockets_UDP_ChallengeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamSockets_UDP_ChallengeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->connection_id(), output);
  }

  // optional fixed64 my_timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->my_timestamp(), output);
  }

  // optional uint32 protocol_version = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->protocol_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamSockets_UDP_ChallengeRequest)
}

::google::protobuf::uint8* CMsgSteamSockets_UDP_ChallengeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamSockets_UDP_ChallengeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->connection_id(), target);
  }

  // optional fixed64 my_timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->my_timestamp(), target);
  }

  // optional uint32 protocol_version = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->protocol_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamSockets_UDP_ChallengeRequest)
  return target;
}

size_t CMsgSteamSockets_UDP_ChallengeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamSockets_UDP_ChallengeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed32 connection_id = 1;
    if (has_connection_id()) {
      total_size += 1 + 4;
    }

    // optional uint32 protocol_version = 4;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

    // optional fixed64 my_timestamp = 3;
    if (has_my_timestamp()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamSockets_UDP_ChallengeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamSockets_UDP_ChallengeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamSockets_UDP_ChallengeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamSockets_UDP_ChallengeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamSockets_UDP_ChallengeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamSockets_UDP_ChallengeRequest)
    MergeFrom(*source);
  }
}

void CMsgSteamSockets_UDP_ChallengeRequest::MergeFrom(const CMsgSteamSockets_UDP_ChallengeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamSockets_UDP_ChallengeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      connection_id_ = from.connection_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      protocol_version_ = from.protocol_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      my_timestamp_ = from.my_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamSockets_UDP_ChallengeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamSockets_UDP_ChallengeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamSockets_UDP_ChallengeRequest::CopyFrom(const CMsgSteamSockets_UDP_ChallengeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamSockets_UDP_ChallengeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamSockets_UDP_ChallengeRequest::IsInitialized() const {
  return true;
}

void CMsgSteamSockets_UDP_ChallengeRequest::Swap(CMsgSteamSockets_UDP_ChallengeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamSockets_UDP_ChallengeRequest::InternalSwap(CMsgSteamSockets_UDP_ChallengeRequest* other) {
  using std::swap;
  swap(connection_id_, other->connection_id_);
  swap(protocol_version_, other->protocol_version_);
  swap(my_timestamp_, other->my_timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgSteamSockets_UDP_ChallengeRequest::GetMetadata() const {
  protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamSockets_UDP_ChallengeReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamSockets_UDP_ChallengeReply::kConnectionIdFieldNumber;
const int CMsgSteamSockets_UDP_ChallengeReply::kChallengeFieldNumber;
const int CMsgSteamSockets_UDP_ChallengeReply::kYourTimestampFieldNumber;
const int CMsgSteamSockets_UDP_ChallengeReply::kProtocolVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamSockets_UDP_ChallengeReply::CMsgSteamSockets_UDP_ChallengeReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::scc_info_CMsgSteamSockets_UDP_ChallengeReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamSockets_UDP_ChallengeReply)
}
CMsgSteamSockets_UDP_ChallengeReply::CMsgSteamSockets_UDP_ChallengeReply(const CMsgSteamSockets_UDP_ChallengeReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&challenge_, &from.challenge_,
    static_cast<size_t>(reinterpret_cast<char*>(&your_timestamp_) -
    reinterpret_cast<char*>(&challenge_)) + sizeof(your_timestamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamSockets_UDP_ChallengeReply)
}

void CMsgSteamSockets_UDP_ChallengeReply::SharedCtor() {
  ::memset(&challenge_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&your_timestamp_) -
      reinterpret_cast<char*>(&challenge_)) + sizeof(your_timestamp_));
}

CMsgSteamSockets_UDP_ChallengeReply::~CMsgSteamSockets_UDP_ChallengeReply() {
  // @@protoc_insertion_point(destructor:CMsgSteamSockets_UDP_ChallengeReply)
  SharedDtor();
}

void CMsgSteamSockets_UDP_ChallengeReply::SharedDtor() {
}

void CMsgSteamSockets_UDP_ChallengeReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgSteamSockets_UDP_ChallengeReply::descriptor() {
  ::protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamSockets_UDP_ChallengeReply& CMsgSteamSockets_UDP_ChallengeReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::scc_info_CMsgSteamSockets_UDP_ChallengeReply.base);
  return *internal_default_instance();
}


void CMsgSteamSockets_UDP_ChallengeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamSockets_UDP_ChallengeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&challenge_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&your_timestamp_) -
        reinterpret_cast<char*>(&challenge_)) + sizeof(your_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamSockets_UDP_ChallengeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamSockets_UDP_ChallengeReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 connection_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_connection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 challenge = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_challenge();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &challenge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 your_timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_your_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &your_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 protocol_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_protocol_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamSockets_UDP_ChallengeReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamSockets_UDP_ChallengeReply)
  return false;
#undef DO_
}

void CMsgSteamSockets_UDP_ChallengeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamSockets_UDP_ChallengeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->connection_id(), output);
  }

  // optional fixed64 challenge = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->challenge(), output);
  }

  // optional fixed64 your_timestamp = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->your_timestamp(), output);
  }

  // optional uint32 protocol_version = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->protocol_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamSockets_UDP_ChallengeReply)
}

::google::protobuf::uint8* CMsgSteamSockets_UDP_ChallengeReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamSockets_UDP_ChallengeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->connection_id(), target);
  }

  // optional fixed64 challenge = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->challenge(), target);
  }

  // optional fixed64 your_timestamp = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->your_timestamp(), target);
  }

  // optional uint32 protocol_version = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->protocol_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamSockets_UDP_ChallengeReply)
  return target;
}

size_t CMsgSteamSockets_UDP_ChallengeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamSockets_UDP_ChallengeReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional fixed64 challenge = 2;
    if (has_challenge()) {
      total_size += 1 + 8;
    }

    // optional fixed32 connection_id = 1;
    if (has_connection_id()) {
      total_size += 1 + 4;
    }

    // optional uint32 protocol_version = 4;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

    // optional fixed64 your_timestamp = 3;
    if (has_your_timestamp()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamSockets_UDP_ChallengeReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamSockets_UDP_ChallengeReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamSockets_UDP_ChallengeReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamSockets_UDP_ChallengeReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamSockets_UDP_ChallengeReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamSockets_UDP_ChallengeReply)
    MergeFrom(*source);
  }
}

void CMsgSteamSockets_UDP_ChallengeReply::MergeFrom(const CMsgSteamSockets_UDP_ChallengeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamSockets_UDP_ChallengeReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      challenge_ = from.challenge_;
    }
    if (cached_has_bits & 0x00000002u) {
      connection_id_ = from.connection_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      protocol_version_ = from.protocol_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      your_timestamp_ = from.your_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamSockets_UDP_ChallengeReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamSockets_UDP_ChallengeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamSockets_UDP_ChallengeReply::CopyFrom(const CMsgSteamSockets_UDP_ChallengeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamSockets_UDP_ChallengeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamSockets_UDP_ChallengeReply::IsInitialized() const {
  return true;
}

void CMsgSteamSockets_UDP_ChallengeReply::Swap(CMsgSteamSockets_UDP_ChallengeReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamSockets_UDP_ChallengeReply::InternalSwap(CMsgSteamSockets_UDP_ChallengeReply* other) {
  using std::swap;
  swap(challenge_, other->challenge_);
  swap(connection_id_, other->connection_id_);
  swap(protocol_version_, other->protocol_version_);
  swap(your_timestamp_, other->your_timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgSteamSockets_UDP_ChallengeReply::GetMetadata() const {
  protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamSockets_UDP_ConnectRequest::InitAsDefaultInstance() {
  ::_CMsgSteamSockets_UDP_ConnectRequest_default_instance_._instance.get_mutable()->crypt_ = const_cast< ::CMsgSteamDatagramSessionCryptInfoSigned*>(
      ::CMsgSteamDatagramSessionCryptInfoSigned::internal_default_instance());
  ::_CMsgSteamSockets_UDP_ConnectRequest_default_instance_._instance.get_mutable()->cert_ = const_cast< ::CMsgSteamDatagramCertificateSigned*>(
      ::CMsgSteamDatagramCertificateSigned::internal_default_instance());
  ::_CMsgSteamSockets_UDP_ConnectRequest_default_instance_._instance.get_mutable()->identity_ = const_cast< ::CMsgSteamNetworkingIdentity*>(
      ::CMsgSteamNetworkingIdentity::internal_default_instance());
}
void CMsgSteamSockets_UDP_ConnectRequest::clear_crypt() {
  if (crypt_ != NULL) crypt_->Clear();
  clear_has_crypt();
}
void CMsgSteamSockets_UDP_ConnectRequest::clear_cert() {
  if (cert_ != NULL) cert_->Clear();
  clear_has_cert();
}
void CMsgSteamSockets_UDP_ConnectRequest::clear_identity() {
  if (identity_ != NULL) identity_->Clear();
  clear_has_identity();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamSockets_UDP_ConnectRequest::kClientConnectionIdFieldNumber;
const int CMsgSteamSockets_UDP_ConnectRequest::kChallengeFieldNumber;
const int CMsgSteamSockets_UDP_ConnectRequest::kMyTimestampFieldNumber;
const int CMsgSteamSockets_UDP_ConnectRequest::kPingEstMsFieldNumber;
const int CMsgSteamSockets_UDP_ConnectRequest::kCryptFieldNumber;
const int CMsgSteamSockets_UDP_ConnectRequest::kCertFieldNumber;
const int CMsgSteamSockets_UDP_ConnectRequest::kLegacyProtocolVersionFieldNumber;
const int CMsgSteamSockets_UDP_ConnectRequest::kIdentityFieldNumber;
const int CMsgSteamSockets_UDP_ConnectRequest::kLegacyClientSteamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamSockets_UDP_ConnectRequest::CMsgSteamSockets_UDP_ConnectRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::scc_info_CMsgSteamSockets_UDP_ConnectRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamSockets_UDP_ConnectRequest)
}
CMsgSteamSockets_UDP_ConnectRequest::CMsgSteamSockets_UDP_ConnectRequest(const CMsgSteamSockets_UDP_ConnectRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cert()) {
    cert_ = new ::CMsgSteamDatagramCertificateSigned(*from.cert_);
  } else {
    cert_ = NULL;
  }
  if (from.has_crypt()) {
    crypt_ = new ::CMsgSteamDatagramSessionCryptInfoSigned(*from.crypt_);
  } else {
    crypt_ = NULL;
  }
  if (from.has_identity()) {
    identity_ = new ::CMsgSteamNetworkingIdentity(*from.identity_);
  } else {
    identity_ = NULL;
  }
  ::memcpy(&challenge_, &from.challenge_,
    static_cast<size_t>(reinterpret_cast<char*>(&legacy_protocol_version_) -
    reinterpret_cast<char*>(&challenge_)) + sizeof(legacy_protocol_version_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamSockets_UDP_ConnectRequest)
}

void CMsgSteamSockets_UDP_ConnectRequest::SharedCtor() {
  ::memset(&cert_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&legacy_protocol_version_) -
      reinterpret_cast<char*>(&cert_)) + sizeof(legacy_protocol_version_));
}

CMsgSteamSockets_UDP_ConnectRequest::~CMsgSteamSockets_UDP_ConnectRequest() {
  // @@protoc_insertion_point(destructor:CMsgSteamSockets_UDP_ConnectRequest)
  SharedDtor();
}

void CMsgSteamSockets_UDP_ConnectRequest::SharedDtor() {
  if (this != internal_default_instance()) delete cert_;
  if (this != internal_default_instance()) delete crypt_;
  if (this != internal_default_instance()) delete identity_;
}

void CMsgSteamSockets_UDP_ConnectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgSteamSockets_UDP_ConnectRequest::descriptor() {
  ::protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamSockets_UDP_ConnectRequest& CMsgSteamSockets_UDP_ConnectRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::scc_info_CMsgSteamSockets_UDP_ConnectRequest.base);
  return *internal_default_instance();
}


void CMsgSteamSockets_UDP_ConnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamSockets_UDP_ConnectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(cert_ != NULL);
      cert_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(crypt_ != NULL);
      crypt_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(identity_ != NULL);
      identity_->Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&challenge_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&my_timestamp_) -
        reinterpret_cast<char*>(&challenge_)) + sizeof(my_timestamp_));
  }
  legacy_protocol_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamSockets_UDP_ConnectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamSockets_UDP_ConnectRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 client_connection_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_client_connection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 challenge = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_challenge();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &challenge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 legacy_client_steam_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_legacy_client_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &legacy_client_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgSteamDatagramCertificateSigned cert = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 my_timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_my_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &my_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_est_ms = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_ping_est_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_est_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_crypt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 legacy_protocol_version = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_legacy_protocol_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &legacy_protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgSteamNetworkingIdentity identity = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_identity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamSockets_UDP_ConnectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamSockets_UDP_ConnectRequest)
  return false;
#undef DO_
}

void CMsgSteamSockets_UDP_ConnectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamSockets_UDP_ConnectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 client_connection_id = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->client_connection_id(), output);
  }

  // optional fixed64 challenge = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->challenge(), output);
  }

  // optional fixed64 legacy_client_steam_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->legacy_client_steam_id(), output);
  }

  // optional .CMsgSteamDatagramCertificateSigned cert = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_cert(), output);
  }

  // optional fixed64 my_timestamp = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->my_timestamp(), output);
  }

  // optional uint32 ping_est_ms = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ping_est_ms(), output);
  }

  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_crypt(), output);
  }

  // optional uint32 legacy_protocol_version = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->legacy_protocol_version(), output);
  }

  // optional .CMsgSteamNetworkingIdentity identity = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_identity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamSockets_UDP_ConnectRequest)
}

::google::protobuf::uint8* CMsgSteamSockets_UDP_ConnectRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamSockets_UDP_ConnectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 client_connection_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->client_connection_id(), target);
  }

  // optional fixed64 challenge = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->challenge(), target);
  }

  // optional fixed64 legacy_client_steam_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->legacy_client_steam_id(), target);
  }

  // optional .CMsgSteamDatagramCertificateSigned cert = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_cert(), deterministic, target);
  }

  // optional fixed64 my_timestamp = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->my_timestamp(), target);
  }

  // optional uint32 ping_est_ms = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ping_est_ms(), target);
  }

  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_crypt(), deterministic, target);
  }

  // optional uint32 legacy_protocol_version = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->legacy_protocol_version(), target);
  }

  // optional .CMsgSteamNetworkingIdentity identity = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_identity(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamSockets_UDP_ConnectRequest)
  return target;
}

size_t CMsgSteamSockets_UDP_ConnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamSockets_UDP_ConnectRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .CMsgSteamDatagramCertificateSigned cert = 4;
    if (has_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *cert_);
    }

    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
    if (has_crypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *crypt_);
    }

    // optional .CMsgSteamNetworkingIdentity identity = 9;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *identity_);
    }

    // optional fixed64 challenge = 2;
    if (has_challenge()) {
      total_size += 1 + 8;
    }

    // optional fixed64 legacy_client_steam_id = 3;
    if (has_legacy_client_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed32 client_connection_id = 1;
    if (has_client_connection_id()) {
      total_size += 1 + 4;
    }

    // optional uint32 ping_est_ms = 6;
    if (has_ping_est_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_est_ms());
    }

    // optional fixed64 my_timestamp = 5;
    if (has_my_timestamp()) {
      total_size += 1 + 8;
    }

  }
  // optional uint32 legacy_protocol_version = 8;
  if (has_legacy_protocol_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->legacy_protocol_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamSockets_UDP_ConnectRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamSockets_UDP_ConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamSockets_UDP_ConnectRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamSockets_UDP_ConnectRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamSockets_UDP_ConnectRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamSockets_UDP_ConnectRequest)
    MergeFrom(*source);
  }
}

void CMsgSteamSockets_UDP_ConnectRequest::MergeFrom(const CMsgSteamSockets_UDP_ConnectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamSockets_UDP_ConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_cert()->::CMsgSteamDatagramCertificateSigned::MergeFrom(from.cert());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_crypt()->::CMsgSteamDatagramSessionCryptInfoSigned::MergeFrom(from.crypt());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_identity()->::CMsgSteamNetworkingIdentity::MergeFrom(from.identity());
    }
    if (cached_has_bits & 0x00000008u) {
      challenge_ = from.challenge_;
    }
    if (cached_has_bits & 0x00000010u) {
      legacy_client_steam_id_ = from.legacy_client_steam_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      client_connection_id_ = from.client_connection_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      ping_est_ms_ = from.ping_est_ms_;
    }
    if (cached_has_bits & 0x00000080u) {
      my_timestamp_ = from.my_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_legacy_protocol_version(from.legacy_protocol_version());
  }
}

void CMsgSteamSockets_UDP_ConnectRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamSockets_UDP_ConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamSockets_UDP_ConnectRequest::CopyFrom(const CMsgSteamSockets_UDP_ConnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamSockets_UDP_ConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamSockets_UDP_ConnectRequest::IsInitialized() const {
  return true;
}

void CMsgSteamSockets_UDP_ConnectRequest::Swap(CMsgSteamSockets_UDP_ConnectRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamSockets_UDP_ConnectRequest::InternalSwap(CMsgSteamSockets_UDP_ConnectRequest* other) {
  using std::swap;
  swap(cert_, other->cert_);
  swap(crypt_, other->crypt_);
  swap(identity_, other->identity_);
  swap(challenge_, other->challenge_);
  swap(legacy_client_steam_id_, other->legacy_client_steam_id_);
  swap(client_connection_id_, other->client_connection_id_);
  swap(ping_est_ms_, other->ping_est_ms_);
  swap(my_timestamp_, other->my_timestamp_);
  swap(legacy_protocol_version_, other->legacy_protocol_version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgSteamSockets_UDP_ConnectRequest::GetMetadata() const {
  protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamSockets_UDP_ConnectOK::InitAsDefaultInstance() {
  ::_CMsgSteamSockets_UDP_ConnectOK_default_instance_._instance.get_mutable()->crypt_ = const_cast< ::CMsgSteamDatagramSessionCryptInfoSigned*>(
      ::CMsgSteamDatagramSessionCryptInfoSigned::internal_default_instance());
  ::_CMsgSteamSockets_UDP_ConnectOK_default_instance_._instance.get_mutable()->cert_ = const_cast< ::CMsgSteamDatagramCertificateSigned*>(
      ::CMsgSteamDatagramCertificateSigned::internal_default_instance());
  ::_CMsgSteamSockets_UDP_ConnectOK_default_instance_._instance.get_mutable()->identity_ = const_cast< ::CMsgSteamNetworkingIdentity*>(
      ::CMsgSteamNetworkingIdentity::internal_default_instance());
}
void CMsgSteamSockets_UDP_ConnectOK::clear_crypt() {
  if (crypt_ != NULL) crypt_->Clear();
  clear_has_crypt();
}
void CMsgSteamSockets_UDP_ConnectOK::clear_cert() {
  if (cert_ != NULL) cert_->Clear();
  clear_has_cert();
}
void CMsgSteamSockets_UDP_ConnectOK::clear_identity() {
  if (identity_ != NULL) identity_->Clear();
  clear_has_identity();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamSockets_UDP_ConnectOK::kClientConnectionIdFieldNumber;
const int CMsgSteamSockets_UDP_ConnectOK::kServerConnectionIdFieldNumber;
const int CMsgSteamSockets_UDP_ConnectOK::kYourTimestampFieldNumber;
const int CMsgSteamSockets_UDP_ConnectOK::kDelayTimeUsecFieldNumber;
const int CMsgSteamSockets_UDP_ConnectOK::kCryptFieldNumber;
const int CMsgSteamSockets_UDP_ConnectOK::kCertFieldNumber;
const int CMsgSteamSockets_UDP_ConnectOK::kIdentityFieldNumber;
const int CMsgSteamSockets_UDP_ConnectOK::kLegacyServerSteamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamSockets_UDP_ConnectOK::CMsgSteamSockets_UDP_ConnectOK()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::scc_info_CMsgSteamSockets_UDP_ConnectOK.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamSockets_UDP_ConnectOK)
}
CMsgSteamSockets_UDP_ConnectOK::CMsgSteamSockets_UDP_ConnectOK(const CMsgSteamSockets_UDP_ConnectOK& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_crypt()) {
    crypt_ = new ::CMsgSteamDatagramSessionCryptInfoSigned(*from.crypt_);
  } else {
    crypt_ = NULL;
  }
  if (from.has_cert()) {
    cert_ = new ::CMsgSteamDatagramCertificateSigned(*from.cert_);
  } else {
    cert_ = NULL;
  }
  if (from.has_identity()) {
    identity_ = new ::CMsgSteamNetworkingIdentity(*from.identity_);
  } else {
    identity_ = NULL;
  }
  ::memcpy(&legacy_server_steam_id_, &from.legacy_server_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_connection_id_) -
    reinterpret_cast<char*>(&legacy_server_steam_id_)) + sizeof(server_connection_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamSockets_UDP_ConnectOK)
}

void CMsgSteamSockets_UDP_ConnectOK::SharedCtor() {
  ::memset(&crypt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_connection_id_) -
      reinterpret_cast<char*>(&crypt_)) + sizeof(server_connection_id_));
}

CMsgSteamSockets_UDP_ConnectOK::~CMsgSteamSockets_UDP_ConnectOK() {
  // @@protoc_insertion_point(destructor:CMsgSteamSockets_UDP_ConnectOK)
  SharedDtor();
}

void CMsgSteamSockets_UDP_ConnectOK::SharedDtor() {
  if (this != internal_default_instance()) delete crypt_;
  if (this != internal_default_instance()) delete cert_;
  if (this != internal_default_instance()) delete identity_;
}

void CMsgSteamSockets_UDP_ConnectOK::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgSteamSockets_UDP_ConnectOK::descriptor() {
  ::protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamSockets_UDP_ConnectOK& CMsgSteamSockets_UDP_ConnectOK::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::scc_info_CMsgSteamSockets_UDP_ConnectOK.base);
  return *internal_default_instance();
}


void CMsgSteamSockets_UDP_ConnectOK::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamSockets_UDP_ConnectOK)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(crypt_ != NULL);
      crypt_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cert_ != NULL);
      cert_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(identity_ != NULL);
      identity_->Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&legacy_server_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_connection_id_) -
        reinterpret_cast<char*>(&legacy_server_steam_id_)) + sizeof(server_connection_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamSockets_UDP_ConnectOK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamSockets_UDP_ConnectOK)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 client_connection_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_client_connection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 legacy_server_steam_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_legacy_server_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &legacy_server_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 your_timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_your_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &your_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 delay_time_usec = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_delay_time_usec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_time_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 server_connection_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_server_connection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_crypt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgSteamDatagramCertificateSigned cert = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgSteamNetworkingIdentity identity = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_identity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamSockets_UDP_ConnectOK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamSockets_UDP_ConnectOK)
  return false;
#undef DO_
}

void CMsgSteamSockets_UDP_ConnectOK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamSockets_UDP_ConnectOK)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 client_connection_id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->client_connection_id(), output);
  }

  // optional fixed64 legacy_server_steam_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->legacy_server_steam_id(), output);
  }

  // optional fixed64 your_timestamp = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->your_timestamp(), output);
  }

  // optional uint32 delay_time_usec = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->delay_time_usec(), output);
  }

  // optional fixed32 server_connection_id = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->server_connection_id(), output);
  }

  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_crypt(), output);
  }

  // optional .CMsgSteamDatagramCertificateSigned cert = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_cert(), output);
  }

  // optional .CMsgSteamNetworkingIdentity identity = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_identity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamSockets_UDP_ConnectOK)
}

::google::protobuf::uint8* CMsgSteamSockets_UDP_ConnectOK::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamSockets_UDP_ConnectOK)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 client_connection_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->client_connection_id(), target);
  }

  // optional fixed64 legacy_server_steam_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->legacy_server_steam_id(), target);
  }

  // optional fixed64 your_timestamp = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->your_timestamp(), target);
  }

  // optional uint32 delay_time_usec = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->delay_time_usec(), target);
  }

  // optional fixed32 server_connection_id = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->server_connection_id(), target);
  }

  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_crypt(), deterministic, target);
  }

  // optional .CMsgSteamDatagramCertificateSigned cert = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_cert(), deterministic, target);
  }

  // optional .CMsgSteamNetworkingIdentity identity = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_identity(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamSockets_UDP_ConnectOK)
  return target;
}

size_t CMsgSteamSockets_UDP_ConnectOK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamSockets_UDP_ConnectOK)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
    if (has_crypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *crypt_);
    }

    // optional .CMsgSteamDatagramCertificateSigned cert = 8;
    if (has_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *cert_);
    }

    // optional .CMsgSteamNetworkingIdentity identity = 10;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *identity_);
    }

    // optional fixed64 legacy_server_steam_id = 2;
    if (has_legacy_server_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed32 client_connection_id = 1;
    if (has_client_connection_id()) {
      total_size += 1 + 4;
    }

    // optional uint32 delay_time_usec = 4;
    if (has_delay_time_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay_time_usec());
    }

    // optional fixed64 your_timestamp = 3;
    if (has_your_timestamp()) {
      total_size += 1 + 8;
    }

    // optional fixed32 server_connection_id = 5;
    if (has_server_connection_id()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamSockets_UDP_ConnectOK::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamSockets_UDP_ConnectOK)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamSockets_UDP_ConnectOK* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamSockets_UDP_ConnectOK>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamSockets_UDP_ConnectOK)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamSockets_UDP_ConnectOK)
    MergeFrom(*source);
  }
}

void CMsgSteamSockets_UDP_ConnectOK::MergeFrom(const CMsgSteamSockets_UDP_ConnectOK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamSockets_UDP_ConnectOK)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_crypt()->::CMsgSteamDatagramSessionCryptInfoSigned::MergeFrom(from.crypt());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cert()->::CMsgSteamDatagramCertificateSigned::MergeFrom(from.cert());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_identity()->::CMsgSteamNetworkingIdentity::MergeFrom(from.identity());
    }
    if (cached_has_bits & 0x00000008u) {
      legacy_server_steam_id_ = from.legacy_server_steam_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      client_connection_id_ = from.client_connection_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      delay_time_usec_ = from.delay_time_usec_;
    }
    if (cached_has_bits & 0x00000040u) {
      your_timestamp_ = from.your_timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      server_connection_id_ = from.server_connection_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamSockets_UDP_ConnectOK::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamSockets_UDP_ConnectOK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamSockets_UDP_ConnectOK::CopyFrom(const CMsgSteamSockets_UDP_ConnectOK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamSockets_UDP_ConnectOK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamSockets_UDP_ConnectOK::IsInitialized() const {
  return true;
}

void CMsgSteamSockets_UDP_ConnectOK::Swap(CMsgSteamSockets_UDP_ConnectOK* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamSockets_UDP_ConnectOK::InternalSwap(CMsgSteamSockets_UDP_ConnectOK* other) {
  using std::swap;
  swap(crypt_, other->crypt_);
  swap(cert_, other->cert_);
  swap(identity_, other->identity_);
  swap(legacy_server_steam_id_, other->legacy_server_steam_id_);
  swap(client_connection_id_, other->client_connection_id_);
  swap(delay_time_usec_, other->delay_time_usec_);
  swap(your_timestamp_, other->your_timestamp_);
  swap(server_connection_id_, other->server_connection_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgSteamSockets_UDP_ConnectOK::GetMetadata() const {
  protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamSockets_UDP_ConnectionClosed::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamSockets_UDP_ConnectionClosed::kToConnectionIdFieldNumber;
const int CMsgSteamSockets_UDP_ConnectionClosed::kFromConnectionIdFieldNumber;
const int CMsgSteamSockets_UDP_ConnectionClosed::kDebugFieldNumber;
const int CMsgSteamSockets_UDP_ConnectionClosed::kReasonCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamSockets_UDP_ConnectionClosed::CMsgSteamSockets_UDP_ConnectionClosed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::scc_info_CMsgSteamSockets_UDP_ConnectionClosed.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamSockets_UDP_ConnectionClosed)
}
CMsgSteamSockets_UDP_ConnectionClosed::CMsgSteamSockets_UDP_ConnectionClosed(const CMsgSteamSockets_UDP_ConnectionClosed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  debug_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_debug()) {
    debug_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.debug_);
  }
  ::memcpy(&reason_code_, &from.reason_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&from_connection_id_) -
    reinterpret_cast<char*>(&reason_code_)) + sizeof(from_connection_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamSockets_UDP_ConnectionClosed)
}

void CMsgSteamSockets_UDP_ConnectionClosed::SharedCtor() {
  debug_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&reason_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&from_connection_id_) -
      reinterpret_cast<char*>(&reason_code_)) + sizeof(from_connection_id_));
}

CMsgSteamSockets_UDP_ConnectionClosed::~CMsgSteamSockets_UDP_ConnectionClosed() {
  // @@protoc_insertion_point(destructor:CMsgSteamSockets_UDP_ConnectionClosed)
  SharedDtor();
}

void CMsgSteamSockets_UDP_ConnectionClosed::SharedDtor() {
  debug_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamSockets_UDP_ConnectionClosed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgSteamSockets_UDP_ConnectionClosed::descriptor() {
  ::protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamSockets_UDP_ConnectionClosed& CMsgSteamSockets_UDP_ConnectionClosed::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::scc_info_CMsgSteamSockets_UDP_ConnectionClosed.base);
  return *internal_default_instance();
}


void CMsgSteamSockets_UDP_ConnectionClosed::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamSockets_UDP_ConnectionClosed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    debug_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&reason_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&from_connection_id_) -
        reinterpret_cast<char*>(&reason_code_)) + sizeof(from_connection_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamSockets_UDP_ConnectionClosed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamSockets_UDP_ConnectionClosed)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string debug = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->debug().data(), static_cast<int>(this->debug().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgSteamSockets_UDP_ConnectionClosed.debug");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reason_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_reason_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 to_connection_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_to_connection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &to_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 from_connection_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_from_connection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamSockets_UDP_ConnectionClosed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamSockets_UDP_ConnectionClosed)
  return false;
#undef DO_
}

void CMsgSteamSockets_UDP_ConnectionClosed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamSockets_UDP_ConnectionClosed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string debug = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug().data(), static_cast<int>(this->debug().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamSockets_UDP_ConnectionClosed.debug");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->debug(), output);
  }

  // optional uint32 reason_code = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reason_code(), output);
  }

  // optional fixed32 to_connection_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->to_connection_id(), output);
  }

  // optional fixed32 from_connection_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->from_connection_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamSockets_UDP_ConnectionClosed)
}

::google::protobuf::uint8* CMsgSteamSockets_UDP_ConnectionClosed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamSockets_UDP_ConnectionClosed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string debug = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug().data(), static_cast<int>(this->debug().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamSockets_UDP_ConnectionClosed.debug");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->debug(), target);
  }

  // optional uint32 reason_code = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reason_code(), target);
  }

  // optional fixed32 to_connection_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->to_connection_id(), target);
  }

  // optional fixed32 from_connection_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->from_connection_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamSockets_UDP_ConnectionClosed)
  return target;
}

size_t CMsgSteamSockets_UDP_ConnectionClosed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamSockets_UDP_ConnectionClosed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string debug = 2;
    if (has_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug());
    }

    // optional uint32 reason_code = 3;
    if (has_reason_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason_code());
    }

    // optional fixed32 to_connection_id = 4;
    if (has_to_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 from_connection_id = 5;
    if (has_from_connection_id()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamSockets_UDP_ConnectionClosed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamSockets_UDP_ConnectionClosed)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamSockets_UDP_ConnectionClosed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamSockets_UDP_ConnectionClosed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamSockets_UDP_ConnectionClosed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamSockets_UDP_ConnectionClosed)
    MergeFrom(*source);
  }
}

void CMsgSteamSockets_UDP_ConnectionClosed::MergeFrom(const CMsgSteamSockets_UDP_ConnectionClosed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamSockets_UDP_ConnectionClosed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_debug();
      debug_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.debug_);
    }
    if (cached_has_bits & 0x00000002u) {
      reason_code_ = from.reason_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      to_connection_id_ = from.to_connection_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      from_connection_id_ = from.from_connection_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamSockets_UDP_ConnectionClosed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamSockets_UDP_ConnectionClosed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamSockets_UDP_ConnectionClosed::CopyFrom(const CMsgSteamSockets_UDP_ConnectionClosed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamSockets_UDP_ConnectionClosed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamSockets_UDP_ConnectionClosed::IsInitialized() const {
  return true;
}

void CMsgSteamSockets_UDP_ConnectionClosed::Swap(CMsgSteamSockets_UDP_ConnectionClosed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamSockets_UDP_ConnectionClosed::InternalSwap(CMsgSteamSockets_UDP_ConnectionClosed* other) {
  using std::swap;
  debug_.Swap(&other->debug_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reason_code_, other->reason_code_);
  swap(to_connection_id_, other->to_connection_id_);
  swap(from_connection_id_, other->from_connection_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgSteamSockets_UDP_ConnectionClosed::GetMetadata() const {
  protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamSockets_UDP_NoConnection::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamSockets_UDP_NoConnection::kFromConnectionIdFieldNumber;
const int CMsgSteamSockets_UDP_NoConnection::kToConnectionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamSockets_UDP_NoConnection::CMsgSteamSockets_UDP_NoConnection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::scc_info_CMsgSteamSockets_UDP_NoConnection.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamSockets_UDP_NoConnection)
}
CMsgSteamSockets_UDP_NoConnection::CMsgSteamSockets_UDP_NoConnection(const CMsgSteamSockets_UDP_NoConnection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_connection_id_, &from.from_connection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_connection_id_) -
    reinterpret_cast<char*>(&from_connection_id_)) + sizeof(to_connection_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamSockets_UDP_NoConnection)
}

void CMsgSteamSockets_UDP_NoConnection::SharedCtor() {
  ::memset(&from_connection_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_connection_id_) -
      reinterpret_cast<char*>(&from_connection_id_)) + sizeof(to_connection_id_));
}

CMsgSteamSockets_UDP_NoConnection::~CMsgSteamSockets_UDP_NoConnection() {
  // @@protoc_insertion_point(destructor:CMsgSteamSockets_UDP_NoConnection)
  SharedDtor();
}

void CMsgSteamSockets_UDP_NoConnection::SharedDtor() {
}

void CMsgSteamSockets_UDP_NoConnection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgSteamSockets_UDP_NoConnection::descriptor() {
  ::protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamSockets_UDP_NoConnection& CMsgSteamSockets_UDP_NoConnection::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::scc_info_CMsgSteamSockets_UDP_NoConnection.base);
  return *internal_default_instance();
}


void CMsgSteamSockets_UDP_NoConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamSockets_UDP_NoConnection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&from_connection_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&to_connection_id_) -
        reinterpret_cast<char*>(&from_connection_id_)) + sizeof(to_connection_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamSockets_UDP_NoConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamSockets_UDP_NoConnection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 from_connection_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_from_connection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 to_connection_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_to_connection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &to_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamSockets_UDP_NoConnection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamSockets_UDP_NoConnection)
  return false;
#undef DO_
}

void CMsgSteamSockets_UDP_NoConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamSockets_UDP_NoConnection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 from_connection_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->from_connection_id(), output);
  }

  // optional fixed32 to_connection_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->to_connection_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamSockets_UDP_NoConnection)
}

::google::protobuf::uint8* CMsgSteamSockets_UDP_NoConnection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamSockets_UDP_NoConnection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 from_connection_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->from_connection_id(), target);
  }

  // optional fixed32 to_connection_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->to_connection_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamSockets_UDP_NoConnection)
  return target;
}

size_t CMsgSteamSockets_UDP_NoConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamSockets_UDP_NoConnection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed32 from_connection_id = 2;
    if (has_from_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 to_connection_id = 3;
    if (has_to_connection_id()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamSockets_UDP_NoConnection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamSockets_UDP_NoConnection)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamSockets_UDP_NoConnection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamSockets_UDP_NoConnection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamSockets_UDP_NoConnection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamSockets_UDP_NoConnection)
    MergeFrom(*source);
  }
}

void CMsgSteamSockets_UDP_NoConnection::MergeFrom(const CMsgSteamSockets_UDP_NoConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamSockets_UDP_NoConnection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      from_connection_id_ = from.from_connection_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      to_connection_id_ = from.to_connection_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamSockets_UDP_NoConnection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamSockets_UDP_NoConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamSockets_UDP_NoConnection::CopyFrom(const CMsgSteamSockets_UDP_NoConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamSockets_UDP_NoConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamSockets_UDP_NoConnection::IsInitialized() const {
  return true;
}

void CMsgSteamSockets_UDP_NoConnection::Swap(CMsgSteamSockets_UDP_NoConnection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamSockets_UDP_NoConnection::InternalSwap(CMsgSteamSockets_UDP_NoConnection* other) {
  using std::swap;
  swap(from_connection_id_, other->from_connection_id_);
  swap(to_connection_id_, other->to_connection_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgSteamSockets_UDP_NoConnection::GetMetadata() const {
  protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamSockets_UDP_Stats::InitAsDefaultInstance() {
  ::_CMsgSteamSockets_UDP_Stats_default_instance_._instance.get_mutable()->stats_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(
      ::CMsgSteamDatagramConnectionQuality::internal_default_instance());
}
void CMsgSteamSockets_UDP_Stats::clear_stats() {
  if (stats_ != NULL) stats_->Clear();
  clear_has_stats();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamSockets_UDP_Stats::kStatsFieldNumber;
const int CMsgSteamSockets_UDP_Stats::kFlagsFieldNumber;
const int CMsgSteamSockets_UDP_Stats::kToConnectionIdFieldNumber;
const int CMsgSteamSockets_UDP_Stats::kFromConnectionIdFieldNumber;
const int CMsgSteamSockets_UDP_Stats::kSeqNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamSockets_UDP_Stats::CMsgSteamSockets_UDP_Stats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::scc_info_CMsgSteamSockets_UDP_Stats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamSockets_UDP_Stats)
}
CMsgSteamSockets_UDP_Stats::CMsgSteamSockets_UDP_Stats(const CMsgSteamSockets_UDP_Stats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stats()) {
    stats_ = new ::CMsgSteamDatagramConnectionQuality(*from.stats_);
  } else {
    stats_ = NULL;
  }
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&from_connection_id_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(from_connection_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamSockets_UDP_Stats)
}

void CMsgSteamSockets_UDP_Stats::SharedCtor() {
  ::memset(&stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&from_connection_id_) -
      reinterpret_cast<char*>(&stats_)) + sizeof(from_connection_id_));
}

CMsgSteamSockets_UDP_Stats::~CMsgSteamSockets_UDP_Stats() {
  // @@protoc_insertion_point(destructor:CMsgSteamSockets_UDP_Stats)
  SharedDtor();
}

void CMsgSteamSockets_UDP_Stats::SharedDtor() {
  if (this != internal_default_instance()) delete stats_;
}

void CMsgSteamSockets_UDP_Stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgSteamSockets_UDP_Stats::descriptor() {
  ::protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamSockets_UDP_Stats& CMsgSteamSockets_UDP_Stats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::scc_info_CMsgSteamSockets_UDP_Stats.base);
  return *internal_default_instance();
}


void CMsgSteamSockets_UDP_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamSockets_UDP_Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(stats_ != NULL);
    stats_->Clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&from_connection_id_) -
        reinterpret_cast<char*>(&flags_)) + sizeof(from_connection_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamSockets_UDP_Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamSockets_UDP_Stats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramConnectionQuality stats = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seq_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_seq_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 to_connection_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_to_connection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &to_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 from_connection_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_from_connection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamSockets_UDP_Stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamSockets_UDP_Stats)
  return false;
#undef DO_
}

void CMsgSteamSockets_UDP_Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamSockets_UDP_Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramConnectionQuality stats = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_stats(), output);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  // optional uint32 seq_num = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seq_num(), output);
  }

  // optional fixed32 to_connection_id = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->to_connection_id(), output);
  }

  // optional fixed32 from_connection_id = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->from_connection_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamSockets_UDP_Stats)
}

::google::protobuf::uint8* CMsgSteamSockets_UDP_Stats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamSockets_UDP_Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramConnectionQuality stats = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_stats(), deterministic, target);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flags(), target);
  }

  // optional uint32 seq_num = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seq_num(), target);
  }

  // optional fixed32 to_connection_id = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->to_connection_id(), target);
  }

  // optional fixed32 from_connection_id = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->from_connection_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamSockets_UDP_Stats)
  return target;
}

size_t CMsgSteamSockets_UDP_Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamSockets_UDP_Stats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .CMsgSteamDatagramConnectionQuality stats = 1;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stats_);
    }

    // optional uint32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 seq_num = 4;
    if (has_seq_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num());
    }

    // optional fixed32 to_connection_id = 9;
    if (has_to_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 from_connection_id = 10;
    if (has_from_connection_id()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamSockets_UDP_Stats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamSockets_UDP_Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamSockets_UDP_Stats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamSockets_UDP_Stats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamSockets_UDP_Stats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamSockets_UDP_Stats)
    MergeFrom(*source);
  }
}

void CMsgSteamSockets_UDP_Stats::MergeFrom(const CMsgSteamSockets_UDP_Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamSockets_UDP_Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stats()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.stats());
    }
    if (cached_has_bits & 0x00000002u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000004u) {
      seq_num_ = from.seq_num_;
    }
    if (cached_has_bits & 0x00000008u) {
      to_connection_id_ = from.to_connection_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      from_connection_id_ = from.from_connection_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamSockets_UDP_Stats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamSockets_UDP_Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamSockets_UDP_Stats::CopyFrom(const CMsgSteamSockets_UDP_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamSockets_UDP_Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamSockets_UDP_Stats::IsInitialized() const {
  return true;
}

void CMsgSteamSockets_UDP_Stats::Swap(CMsgSteamSockets_UDP_Stats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamSockets_UDP_Stats::InternalSwap(CMsgSteamSockets_UDP_Stats* other) {
  using std::swap;
  swap(stats_, other->stats_);
  swap(flags_, other->flags_);
  swap(seq_num_, other->seq_num_);
  swap(to_connection_id_, other->to_connection_id_);
  swap(from_connection_id_, other->from_connection_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgSteamSockets_UDP_Stats::GetMetadata() const {
  protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamnetworkingsockets_5fmessages_5fudp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgSteamSockets_UDP_ChallengeRequest* Arena::CreateMaybeMessage< ::CMsgSteamSockets_UDP_ChallengeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgSteamSockets_UDP_ChallengeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgSteamSockets_UDP_ChallengeReply* Arena::CreateMaybeMessage< ::CMsgSteamSockets_UDP_ChallengeReply >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgSteamSockets_UDP_ChallengeReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgSteamSockets_UDP_ConnectRequest* Arena::CreateMaybeMessage< ::CMsgSteamSockets_UDP_ConnectRequest >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgSteamSockets_UDP_ConnectRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgSteamSockets_UDP_ConnectOK* Arena::CreateMaybeMessage< ::CMsgSteamSockets_UDP_ConnectOK >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgSteamSockets_UDP_ConnectOK >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgSteamSockets_UDP_ConnectionClosed* Arena::CreateMaybeMessage< ::CMsgSteamSockets_UDP_ConnectionClosed >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgSteamSockets_UDP_ConnectionClosed >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgSteamSockets_UDP_NoConnection* Arena::CreateMaybeMessage< ::CMsgSteamSockets_UDP_NoConnection >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgSteamSockets_UDP_NoConnection >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgSteamSockets_UDP_Stats* Arena::CreateMaybeMessage< ::CMsgSteamSockets_UDP_Stats >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgSteamSockets_UDP_Stats >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
